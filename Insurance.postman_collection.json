{
: {Abhishek
	
		"name": "Insurance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "IP_User",
					"item": [
						{
							"name": "DnB",
							"item": [
								{
									"name": "Get_ByDUNS",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "710e8cbe-0607-42f2-98e1-f0c2c59996ea",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var jsonData = res.json();\r",
													"    //  console.log(\"duns:\"+jsonData[0].duns);\r",
													"    pm.variables.set(\"duns\",jsonData[0].duns);\r",
													"    pm.variables.set(\"Debtor\",jsonData[0]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cbd46c95-347f-471f-8696-3416e2d5663c",
												"exec": [
													"\r",
													"pm.variables.get(\"Debtor\")\r",
													"pm.test(\"To check /api/{id} returns DUNS\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(pm.variables.get(\"Debtor\")).to.eql(jsonData.results[0]);\r",
													"    //pm.expect(jsonData.duns).to.eql(expectedDUNS);\r",
													"}); \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/DnB?duns={{duns}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"DnB"
											],
											"query": [
												{
													"key": "maxResultCount",
													"value": "25",
													"disabled": true
												},
												{
													"key": "country",
													"value": "United State of America",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Test Account Debtor 8",
													"disabled": true
												},
												{
													"key": "duns",
													"value": "{{duns}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_MaxResultCount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd9ef949-df04-44d9-a2d1-66622895e27d",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"\r",
													"pm.test(\"To check Debtor details is not null (sicCode,addressLine1,city,stateProvince,postalCode,countryCode,country,id,name,duns,countryName)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].addressLine1).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].city).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].stateProvince).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].postalCode).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].countryCode).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].duns).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].countryName).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].isActive).to.not.eql(null);\r",
													"\r",
													"    }         \r",
													"    \r",
													"}); \r",
													"\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"if(pm.response.code == 200 & responseBody !== '')\r",
													"pm.test(\"Verify Max Result Count for dnb should be equal or below \" + pm.variables.get(\"maxResultCount\"), function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.results.length).to.be.below(11);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7b29e932-e618-43fa-8246-f5198e3ca8e2",
												"exec": [
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/Debtors\");",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"      ",
													"}, function (err, res) {",
													"    ",
													"    var jsonData = res.json();",
													"    //  console.log(\"duns:\"+jsonData[0].duns);",
													"    pm.variables.set(\"name\",jsonData[0].name);",
													"    pm.variables.set(\"Debtor\",jsonData[0]);",
													"    pm.variables.set(\"country\",jsonData[0].countryCode);",
													"    pm.variables.set(\"Debtor\",jsonData[0]);",
													"    pm.variables.set(\"maxResultCount\",5);",
													"});",
													"",
													"",
													"//pm.variables.set(\"name\", \"Test Account Debtor 8\");",
													"//pm.variables.set(\"country\", \"US\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/dnb?name={{name}}&country={{country}}&maxResultCount={{maxResultCount}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"dnb"
											],
											"query": [
												{
													"key": "name",
													"value": "{{name}}"
												},
												{
													"key": "country",
													"value": "{{country}}"
												},
												{
													"key": "maxResultCount",
													"value": "{{maxResultCount}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Broker",
							"item": [
								{
									"name": "Get_Broker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "49a1a76d-818e-41bc-ba26-d871d0b2aeb6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aa5720ed-ef11-4676-bcd9-6afcd942204c",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"}); \r",
													"\r",
													"pm.test(\"To check Debtor details is not null (id,name,duns,countryName)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].duns).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].countryName).to.not.eql(null);\r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Brokers",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Brokers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_CoBroker",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "61f3c8be-6502-4502-b1db-e292a035caaa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ae3ffdc2-6c76-4382-ab66-67bb3c4e37e6",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"}); \r",
													"\r",
													"pm.test(\"To check Debtor details is not null (id,name,duns,countryName)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].duns).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].countryName).to.not.eql(null);\r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/cobrokers",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"cobrokers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Broker Count=100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ee6184c-3440-4953-aa12-3ba5c8459a91",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"    ",
													"if(responseBody !== '')",
													"{",
													"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"        pm.expect(responseJSONdata.length).to.be.below(101);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Brokers?count=0",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Brokers"
											],
											"query": [
												{
													"key": "count",
													"value": "0"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								},
								{
									"name": "Get_Broker/MinimumSkip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d42b624-eb2f-4ecc-9e50-6e4ea5934313",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"    ",
													"if(responseBody !== '')",
													"{",
													"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"        pm.expect(responseJSONdata.length).to.be.below(101);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "235c206b-d2f9-4444-a62f-460393702f20",
												"exec": [
													"pm.variables.set(\"skip\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Brokers?skip={{skip}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Brokers"
											],
											"query": [
												{
													"key": "count",
													"value": "100",
													"disabled": true
												},
												{
													"key": "skip",
													"value": "{{skip}}"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								},
								{
									"name": "Get_Broker/MaximumSkip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c8d8f35-03f9-4961-ac78-1d88bc9bfdd9",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"        pm.expect(responseJSONdata.length).to.be.below(105);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53c90d9e-1994-4c54-85eb-aef0e99162fa",
												"exec": [
													"pm.variables.set(\"skip\", 100);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Brokers?skip={{skip}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Brokers"
											],
											"query": [
												{
													"key": "count",
													"value": "100",
													"disabled": true
												},
												{
													"key": "skip",
													"value": "{{skip}}"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Policy",
							"item": [
								{
									"name": "Get_Policy Attachments Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55795614-5c5d-4af2-9714-32daf1402b68",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Date Financier Purchases Asset' || ",
													"            responseJSONdata[i].name == 'Delivery Date' ||",
													"            responseJSONdata[i].name == 'Invoice Date' ||",
													"            responseJSONdata[i].name == 'Not Applicable' ||",
													"            responseJSONdata[i].name == 'Shipment Date' ",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39dbbc26-a008-44c8-902d-aed852871b51",
												"exec": [
													"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/policyattachmenttypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"policyattachmenttypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Policy Deductible Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3d08e2f-7ac4-45c3-a890-86dca86fb4ad",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Yes - % of aggregate losses' || ",
													"            responseJSONdata[i].name == 'Yes - % of each and every loss' ||",
													"            responseJSONdata[i].name == 'Yes - Amount of aggregate losses' || ",
													"            responseJSONdata[i].name == 'Yes - Amount of each and every loss' ||",
													"            responseJSONdata[i].name == 'No'",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83dbccf4-5794-4c43-9603-423b8ca78adf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/policydeductibletypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"policydeductibletypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Policy Liability Limit Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "171c37a7-377c-4323-bc73-301fad0d36c3",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Buyer' || ",
													"            responseJSONdata[i].name == 'Country' ||",
													"            responseJSONdata[i].name == 'Policy'",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a0edc3cd-0942-46cb-b44f-9dad3c89790a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/policyliabilitylimittypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"policyliabilitylimittypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Policy Premium Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b1c3fc-8e8f-4990-8051-2b5739d5f7bd",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Blended Rate by Buyer' || ",
													"            responseJSONdata[i].name == 'Blended Rate By Country' ||",
													"            responseJSONdata[i].name == 'Fixed rate'",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "004c6828-8020-429a-81a5-51389b153d29",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/policypremiumtypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"policypremiumtypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Report Period Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73dae3c3-b28f-460e-b758-f42673dafc32",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Annually' || ",
													"            responseJSONdata[i].name == 'Custom' ||",
													"            responseJSONdata[i].name == 'Monthly' ||",
													"           responseJSONdata[i].name == 'Quarterly' ||",
													"           responseJSONdata[i].name == 'Semi-Annually' ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fac37248-c8c2-4c0c-87b9-b332e5d8ba9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/reportperiodtypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"reportperiodtypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Scope of Coverage Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0725b36-4185-4dc3-85f5-69946eaef788",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'All Domestic Sales' || ",
													"            responseJSONdata[i].name == 'All Export Sales' ||",
													"            responseJSONdata[i].name == 'Named Buyers' ||",
													"           responseJSONdata[i].name == 'All Sales' ||",
													"            responseJSONdata[i].name == 'Not Applicable' ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e460c75-ecf1-4704-97bd-1617b73b309f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/scopeofcoveragetypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"scopeofcoveragetypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Policy Documents Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87f36e48-716a-4d1c-a032-ac20a6a0a982",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Additional Named Insured Endorsement' || ",
													"            responseJSONdata[i].name == 'Broker Endorsement' ||",
													"            responseJSONdata[i].name == 'Country Schedule' ||",
													"           responseJSONdata[i].name == 'DCL Endorsement'  ||",
													"           responseJSONdata[i].name == 'Ledger DCL Endorsement' || ",
													"            responseJSONdata[i].name == 'Loss Payee Endorsement' ||",
													"            responseJSONdata[i].name == 'LQX Endorsement' ||",
													"           responseJSONdata[i].name == 'Other'  ||",
													"           responseJSONdata[i].name == 'Policy Declarations' ||",
													"            responseJSONdata[i].name == 'Policy Terms and Conditions' ||",
													"           responseJSONdata[i].name == 'Preference Claims Endorsement'  ||",
													"           responseJSONdata[i].name == 'Premium Schedule' || ",
													"            responseJSONdata[i].name == 'Sanctions Endorsement' ||",
													"            responseJSONdata[i].name == 'Seller Schedule'  ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b82edcb8-4640-47e7-8a5f-19c0d2bc69a9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/policydocumenttypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"policydocumenttypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Currencies",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fd648c9-ff1a-4b49-947d-d6b991805495",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a0e46a92-c48d-459d-b387-3a405b68d66c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/currencies",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"currencies"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Governing Laws",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4f98ffc-89f7-4c91-9bf6-da20d09409d8",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Governing Law is not null (id,name,insuranceCarrier,insuredParty)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].code).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].isIncludedInPolicy).to.not.eql(null);\r",
													"  \r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b607b202-16bd-4289-8863-e08f2858064b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/governinglaws",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"governinglaws"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Political Risk Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a64f57c3-ee1f-4934-a2ce-e6b05ef3d7cd",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (",
													"           responseJSONdata[i].name == 'N/A'  ||",
													"           responseJSONdata[i].name == 'No' || ",
													"            responseJSONdata[i].name == 'By Country' ||",
													"            responseJSONdata[i].name == 'Yes'  ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "014a9f71-a813-42cb-90d7-c6796748c847",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/politicalrisktypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"politicalrisktypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Peril Coverage Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b17b553d-ec0d-4e93-96f3-50393230a196",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (",
													"           responseJSONdata[i].name == 'All Risks'  ||",
													"           responseJSONdata[i].name == 'Insolvency' || ",
													"            responseJSONdata[i].name == 'Protracted Default' ||",
													"            responseJSONdata[i].name == 'Political Risks'  ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "391bdf18-cfeb-47ec-b22a-7d6427eb529d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/perilcoveragetype",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"perilcoveragetype"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Peril Coverage Period Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da843e52-c098-490c-bffc-494e09d28b09",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (",
													"           responseJSONdata[i].name == 'By Country'  ||",
													"           responseJSONdata[i].name == 'Enter Value' || ",
													"            responseJSONdata[i].name == 'N/A' ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8f6ec70f-a61a-4a40-a31d-c43f4650f230",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/perilcoverageperiodtype",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"perilcoverageperiodtype"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Max Extension Period Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb020d77-1793-43d4-85fc-30edfd339cb8",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (",
													"           responseJSONdata[i].name == 'By Country'  ||",
													"           responseJSONdata[i].name == 'Enter Value'",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f646f85f-eeee-4f10-93a1-cb2a9dd99a44",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/maxextensionperiodtype",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"maxextensionperiodtype"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ Buyer Value Option Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afcf3ad8-7622-4f5a-8d17-e9a6348b3ca4",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (",
													"           responseJSONdata[i].name == 'By Buyer'  ||",
													"           responseJSONdata[i].name == 'Enter Value'            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6658e5c0-2bdc-4b0b-b224-94d7bba39450",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/buyervalueoptiontypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"buyervalueoptiontypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ Buyer States",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf05f39b-ea22-4408-9c84-fdd3ca213846",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (",
													"           responseJSONdata[i].name == 'Bound'            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e09495c-55ad-450c-820f-775c520d7709",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/buyerstates",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"buyerstates"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Carriers",
							"item": [
								{
									"name": "Get_Insurance Carriers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fe282b6-378d-4222-b3f4-a2144ebbcc24",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"\r",
													"});\r",
													"pm.test(\"To check Debtor details is not null (id,name,duns,countryName)\", function () {\r",
													"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
													"        // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"        pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].duns).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].countryName).to.not.eql(null);\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7024575b-d1d2-4194-a39e-2a982c33b45b",
												"exec": [
													"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuranceCarriers",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuranceCarriers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Insurance Carrier/ Indicative Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e0dcfb5-01e2-49fa-ab42-66f0f67343da",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"\r",
													"});\r",
													"pm.test(\"To check Debtor details is not null (id,name,duns,countryName)\", function () {\r",
													"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
													"        // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"        pm.expect(responseJSONdata[i].maxTenor).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].quotesCount).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].indicativeLimitsSum).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8ec5f548-74cb-48aa-b69f-9eeb437e6782",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuranceCarriers/indicativedetail",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuranceCarriers",
												"indicativedetail"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Insurance Carrier/ CarrierPolicy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e02f4f66-d3aa-4883-931b-8b760bd365e6",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"    ",
													"});",
													"",
													"",
													"var expectedCarrierId = JSON.parse(pm.variables.get(\"Carriers\"));",
													"",
													"pm.test(\"To check Policy details is not null (carrierId,carrierName,policies)\" , function(){",
													"    for (var i=0; i < responseJSONdata.length; i++)",
													"    {",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);",
													"      pm.expect(responseJSONdata[i].carrierId).to.not.eql(null);",
													"      pm.expect(responseJSONdata[i].carrierName).to.not.eql(null);",
													"      pm.expect(responseJSONdata[i].policies).to.not.eql(null);",
													"     ",
													"    }  ",
													"});",
													"",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"    pm.expect(responseJSONdata.length).to.be.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4785c0c1-b3f8-4d6b-b499-9d2aa8d918b5",
												"exec": [
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/InsuranceCarriers\");",
													"console.log(url);",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"      ",
													"}, function (err, res) {",
													"    var jsonData = res.json();",
													"    var carriers=[];",
													"    for (var i=0;i<jsonData.length;i++)",
													"    {",
													"        carriers.push(jsonData[i].id);",
													"    }",
													"    pm.variables.set(\"Carriers\", JSON.stringify(carriers));",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuranceCarriers/carrierpolicies",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuranceCarriers",
												"carrierpolicies"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Carriers Count=100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53f3dc48-790d-4d48-acb3-bfdc5c70a359",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"        pm.expect(responseJSONdata.length).to.be.below(101);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d66f10d6-8c98-4a5b-ad1f-aa629eefb299",
												"exec": [
													"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuranceCarriers?count=100",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuranceCarriers"
											],
											"query": [
												{
													"key": "count",
													"value": "100"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								},
								{
									"name": "Get_Carriers/MinimumSkip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af2bfead-5184-433b-b96a-afe463c0863c",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"        pm.expect(responseJSONdata.length).to.be.below(101);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3dca9077-b63b-447d-bc48-d4baa5415258",
												"exec": [
													"pm.variables.set(\"skip\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuranceCarriers?skip={{skip}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuranceCarriers"
											],
											"query": [
												{
													"key": "skip",
													"value": "{{skip}}"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								},
								{
									"name": "Get_Carriers/MaximumSkip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2eda1dc4-349d-43aa-8d58-ade6144364b2",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"        pm.expect(responseJSONdata.length).to.be.below(101);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f778f56-c1ec-4564-915a-a1198d659da7",
												"exec": [
													"pm.variables.set(\"skip\", 10);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuranceCarriers?skip={{skip}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuranceCarriers"
											],
											"query": [
												{
													"key": "skip",
													"value": "{{skip}}"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Insured Party",
							"item": [
								{
									"name": "Get_Insurance Parties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29faa611-f481-4fff-a0c3-5d5c4923c56c",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"\r",
													"});\r",
													"pm.test(\"To check Debtor details is not null (id,name,duns,countryName)\", function () {\r",
													"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
													"        // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"        pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].isActive).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].countryName).to.not.eql(null);\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3d6899ba-2da8-4057-977e-597be105afb4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/InsuredParties",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuredParties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Insurance Party By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d56799e-4cc2-4925-923b-a6c78dc1100c",
												"exec": [
													"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"\r",
													"});\r",
													"pm.test(\"To check Debtor details is not null (id,name,duns,countryName)\", function () {\r",
													"    for (var i = 0; i < responseJSONdata.length; i++) {\r",
													"        // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"        pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].countryName).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].isActive).to.not.eql(null);\r",
													"\r",
													"    }\r",
													"\r",
													"});\r",
													"pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2be78bf3-a838-4bfa-bde9-957e62431682",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/InsuredParties\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"              }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"\r",
													"    pm.variables.set(\"IPid\",jsonData[i].id);\r",
													"    console.log(jsonData[i].id);\r",
													"     });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuredParties/{{ParticipantID}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuredParties",
												"{{ParticipantID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Insurance Party By Id Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0746640d-8b92-4bb5-b9d5-7c2acfd90a64",
												"exec": [
													"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"",
													"});",
													"pm.test(\"To check Debtor details is not null (id,name,duns,countryName)\", function () {",
													"    for (var i = 0; i < responseJSONdata.length; i++) {",
													"        // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);",
													"        pm.expect(responseJSONdata[i].id).to.not.eql(null);",
													"        pm.expect(responseJSONdata[i].name).to.not.eql(null);",
													"        pm.expect(responseJSONdata[i].countryName).to.not.eql(null);",
													"        pm.expect(responseJSONdata[i].isActive).to.not.eql(null);",
													"",
													"    }",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eec21e8a-f4c1-4455-8738-a7fb3064227b",
												"exec": [
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/InsuredParties\");",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"              }",
													"      ",
													"}, function (err, res) {",
													"    ",
													"",
													"    var jsonData = res.json();",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);",
													"  // console.log(\"count \"+i);",
													"  // console.log(\"Sic:\"+jsonData[i]);",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);",
													" var responseJSONdata = res.json();",
													" ",
													"",
													"     for (var i = 0; i < responseJSONdata.length; i++) {",
													"     ",
													"             if (responseJSONdata[i].name === pm.environment.get('InsPartyName')){",
													"                 pm.variables.set(\"ParticipantID\", responseJSONdata[i].id);",
													"                 console.log(responseJSONdata[i].id);",
													"                 ",
													"             } ",
													"         }",
													"    });",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuredParties/{{ParticipantID}}/detail",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuredParties",
												"{{ParticipantID}}",
												"detail"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "abef9e3f-4e96-4f27-b45b-e1242e481d9b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58fdd09f-3245-4d65-920a-0f1fcd0f9999",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Debtor",
							"item": [
								{
									"name": "Get_Debtors",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e394ec43-3b20-467f-97a5-db49f6a42e90",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"To check Debtor details is not null (sicCode,addressLine1,city,stateProvince,postalCode,countryCode,country,id,name,duns,countryName)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].addressLine1).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].city).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].postalCode).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].countryCode).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].country).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].duns).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].countryName).to.not.eql(null);\r",
													"\r",
													"    }         \r",
													"    \r",
													"}); \r",
													"//pm.test(\"Validate response body: \", function(){\r",
													"     //pm.expect(responseJSONdata).to.have.any.keys('sicCode','addressLine1','city','stateProvince','postalCode','countryCode','country','id','name','duns','countryName' );\r",
													"    //});\r",
													"\r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5628784e-6d94-49f0-b7a4-376721a48ce4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Debtors",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Debtors"
											],
											"query": [
												{
													"key": "Name",
													"value": "Test Account Debtor 8",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Debtors/DeafultValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a76b3e4c-5aed-4dcc-aa3f-de3ae85cb253",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200)});\r",
													"\r",
													"if(responseBody !== '')\r",
													"{\r",
													"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"        pm.expect(responseJSONdata.length).to.be.above(1);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Debtors?count=100",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Debtors"
											],
											"query": [
												{
													"key": "count",
													"value": "100"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								},
								{
									"name": "Get_Debtors/MinimumSkip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd750492-c0e8-4ead-8050-b040f5a9a2bc",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)",
													"});",
													"",
													"if (responseBody !== '') {",
													"    pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {",
													"        pm.expect(responseJSONdata.length).to.be.below(1001);",
													"    });",
													"}",
													"else {",
													"    pm.test(\"Blank response body!\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6fb44195-415c-4068-b72a-beebc3beacc4",
												"exec": [
													"pm.variables.set(\"skip\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Debtors?skip={{skip}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Debtors"
											],
											"query": [
												{
													"key": "count",
													"value": "100",
													"disabled": true
												},
												{
													"key": "skip",
													"value": "{{skip}}"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								},
								{
									"name": "Get_Debtors/MaximumSkip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc441311-8147-477c-96aa-9311cbb5d70c",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)",
													"});",
													"",
													"if (responseBody !== '') {",
													"    pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {",
													"        pm.expect(responseJSONdata.length).to.be.below(1001);",
													"    });",
													"}",
													"else {",
													"    pm.test(\"Blank response body!\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19c3f491-81a4-470b-9480-b67e0089debb",
												"exec": [
													"pm.variables.set(\"skip\", 50);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Debtors?skip={{skip}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Debtors"
											],
											"query": [
												{
													"key": "count",
													"value": "100",
													"disabled": true
												},
												{
													"key": "skip",
													"value": "{{skip}}"
												}
											]
										},
										"description": "Yet To Be Implemented from Vishal`s side as limited data is available."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "31627c89-d2cd-4008-a52d-ec35cfc15504",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "09c00e12-91e4-4366-9e91-1aac2425b0ef",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Lookups",
							"item": [
								{
									"name": "Get_AttachmentPeriodTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af7f582f-2f11-4d4e-8166-86e2e28bc3e6",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Date Financial Purchase Asset' || ",
													"            responseJSONdata[i].name == 'Date of Receipt by AD' ||",
													"            responseJSONdata[i].name == 'Invoice Date' || ",
													"            responseJSONdata[i].name == 'Supplier Shipment Date' ",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/attachmentperiodtypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"attachmentperiodtypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_PremiumBasisType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87c1a3e5-9cf3-42ab-a7b3-0166bca53a39",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'GROSS LIMIT' || ",
													"            responseJSONdata[i].name == 'INSURABLE SALES' ||",
													"            responseJSONdata[i].name == 'MONTH END A/R BALANCES' || ",
													"            responseJSONdata[i].name == 'MONTH END GROSS EXPOSURE' || ",
													"             responseJSONdata[i].name == 'MONTH END NET EXPOSURE' ||",
													"            responseJSONdata[i].name == 'NET LIMIT' ||",
													"            responseJSONdata[i].name == 'MONTHLY PEAK A/R'||",
													"            responseJSONdata[i].name == 'UTILIZATION'",
													"            ",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"Premium Basis Type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/premiumbasistypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"premiumbasistypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Countries",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71d1b288-a5c7-40f8-a79b-96d12cc716a6",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"pm.test(\"To check Country details is not null (id,iso2,iso3,name)\" , function(){",
													"    for (var i=0; i < responseJSONdata.length; i++)",
													"    {",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);",
													"      pm.expect(responseJSONdata[i].iso2).to.not.eql(null);",
													"      pm.expect(responseJSONdata[i].iso3).to.not.eql(null);",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);",
													"      ",
													"    }         ",
													"    ",
													"}); ",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"    pm.expect(responseJSONdata.length).to.be.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/countries",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"countries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Products",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5a2fc6b-c150-47be-b637-f4674d027fc6",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'A/R' || ",
													"            responseJSONdata[i].name == 'SCF' ",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/products",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_QuoteTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7817e640-f7c9-461a-bcf8-6e8b9b86bdbb",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Firm' || ",
													"            responseJSONdata[i].name == 'Last Look' ",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/quotetypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"quotetypes"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Quotes",
							"item": [
								{
									"name": "Quotes By Id",
									"item": [
										{
											"name": "Get_PendingQuotes By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e4a48562-55be-45a3-8ce9-13127afb6b2e",
														"exec": [
															"\r",
															"var responseJSONdata = JSON.parse(responseBody);\r",
															"\r",
															"\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(200)});\r",
															"    \r",
															"    \r",
															"    \r",
															"pm.test(\"To check Quote details is not null (status,debtorIds,id,quoteId,maxCreditLimit,attachmentPeriodTypeId,quoteTypeId,premiumBasisTypeId,requestCancellableByIp,indemnity)\" , function(){\r",
															"    for (var i=0; i < responseJSONdata.length; i++)\r",
															"    {\r",
															"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
															"      pm.expect(responseJSONdata[i].status).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].debtorIds).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].quoteId).to.not.eql(null);\r",
															"        pm.expect(responseJSONdata[i].maxCreditLimit).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].attachmentPeriodTypeId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].quoteTypeId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].premiumBasisTypeId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].requestCancellableByIp).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].indemnity).to.not.eql(null);\r",
															"    }         \r",
															"    \r",
															"});\r",
															"    \r",
															"var expectedQuoteId = pm.variables.get(\"QuoteId\");\r",
															"var actualQuoteId = responseJSONdata.quoteId;\r",
															"\r",
															"    pm.test(\"Validate QuoteId returned: \"+ responseJSONdata.quoteId, function(){\r",
															"        pm.expect(expectedQuoteId).to.be.eql(actualQuoteId);\r",
															"    });\r",
															"\r",
															"      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c30c2f41-9cbe-487c-a43e-c55075df65d9",
														"exec": [
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/quotes?screenname=pendingquotes\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
															"      }\r",
															"}, function (err, res) {\r",
															"    var jsonData = res.json();\r",
															"    pm.variables.set(\"QuoteId\", jsonData[0].quoteId);\r",
															"    \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessTokenIP}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseURI}}/api/Quotes/{{QuoteId}}",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Quotes",
														"{{QuoteId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_ApprovedLimits By Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b2572611-1a82-4d8d-8b73-003e1ed3dccf",
														"exec": [
															"\r",
															"var responseJSONdata = JSON.parse(responseBody);\r",
															"var expectedQuoteId = pm.variables.get(\"QuoteId\");\r",
															"var actualQuoteId = responseJSONdata.quoteId;\r",
															"\r",
															"    pm.test(\"Validate QuoteId returned: \"+ responseJSONdata.quoteId, function(){\r",
															"        pm.expect(expectedQuoteId).to.be.eql(actualQuoteId);\r",
															"    });\r",
															"\r",
															"      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a0fae223-6cf7-4f46-ac07-7f86f9280e64",
														"exec": [
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/quotes?screenname=approvedlimit\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
															"      }\r",
															"}, function (err, res) {\r",
															"    var jsonData = res.json();\r",
															"    pm.variables.set(\"QuoteId\", jsonData[0].quoteId);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseURI}}/api/Quotes/{{QuoteId}}",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Quotes",
														"{{QuoteId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_Quotes By ID with Original Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "48e788ac-fee1-42c4-9091-657a71f74939",
														"exec": [
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/quotes?screenname=pendingquotes\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
															"      }\r",
															"}, function (err, res) {\r",
															"    var jsonData = res.json();\r",
															"    pm.variables.set(\"QuoteId\", jsonData[0].quoteId);\r",
															"    \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "322e4c65-5f5c-423b-b129-46578830132b",
														"exec": [
															"\r",
															"var responseJSONdata = JSON.parse(responseBody);\r",
															"var expectedQuoteId = pm.variables.get(\"QuoteId\");\r",
															"var actualQuoteId = responseJSONdata.quoteId;\r",
															"\r",
															"\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(200)});\r",
															"    \r",
															"\r",
															"pm.test(\"Validate QuoteId returned: \"+ responseJSONdata.quoteId, function(){\r",
															"        pm.expect(expectedQuoteId).to.be.eql(actualQuoteId);\r",
															"    });\r",
															"\r",
															"\r",
															"pm.test(\"To check Original Quote details is not null (status,debtorIds,insuranceCarrierId,insuranceCarrier,insurancePolicyId,insurancePolicy,initiatingParticipantId,id,quoteId,maxCreditLimit,attachmentPeriodTypeId,requestCancellableByIp,indemnity)\" , function(){\r",
															"    for (var i=0; i < responseJSONdata.length; i++)\r",
															"    {\r",
															"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
															"      pm.expect(responseJSONdata[i].status).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].debtorIds).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].insuranceCarrierId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].insuranceCarrier).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].insurancePolicyId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].insurancePolicy).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].initiatingParticipantId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].quoteId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].maxCreditLimit).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].attachmentPeriodTypeId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].requestCancellableByIp).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].indemnity).to.not.eql(null);\r",
															"\r",
															"    }         \r",
															"    \r",
															"}); \r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseURI}}/api/Quotes/{{QuoteId}}/orig",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Quotes",
														"{{QuoteId}}",
														"orig"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_Quotes By ID with Last Updated Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "276a98ab-a481-42d1-bc24-d70a01385c2d",
														"exec": [
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/quotes?screenname=pendingquotes\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
															"      }\r",
															"}, function (err, res) {\r",
															"    var jsonData = res.json();\r",
															"    pm.variables.set(\"QuoteId\", jsonData[0].quoteId);\r",
															"    \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5db2693e-d521-4b94-805a-16bcff893e0f",
														"exec": [
															"\r",
															"var responseJSONdata = JSON.parse(responseBody);\r",
															"var expectedQuoteId = pm.variables.get(\"QuoteId\");\r",
															"var actualQuoteId = responseJSONdata.quoteId;\r",
															"\r",
															"\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(200)});\r",
															"    \r",
															"\r",
															"pm.test(\"Validate QuoteId returned: \"+ responseJSONdata.quoteId, function(){\r",
															"        pm.expect(expectedQuoteId).to.be.eql(actualQuoteId);\r",
															"    });\r",
															"\r",
															"\r",
															"pm.test(\"To check Original Quote details is not null (status,debtorIds,insuranceCarrierId,insuranceCarrier,insurancePolicyId,insurancePolicy,initiatingParticipantId,id,quoteId,maxCreditLimit,attachmentPeriodTypeId,requestCancellableByIp,indemnity)\" , function(){\r",
															"    for (var i=0; i < responseJSONdata.length; i++)\r",
															"    {\r",
															"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
															"      pm.expect(responseJSONdata[i].status).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].debtorIds).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].insuranceCarrierId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].insuranceCarrier).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].insurancePolicyId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].insurancePolicy).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].initiatingParticipantId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].quoteId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].maxCreditLimit).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].attachmentPeriodTypeId).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].requestCancellableByIp).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].indemnity).to.not.eql(null);\r",
															"\r",
															"    }         \r",
															"    \r",
															"}); \r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseURI}}/api/Quotes/{{QuoteId}}/last",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Quotes",
														"{{QuoteId}}",
														"last"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Quotes By ScreenName",
									"item": [
										{
											"name": "PendingQuotes",
											"item": [
												{
													"name": "Get_PendingQuotes",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d9d7637b-04b1-4f05-ad90-9bb2243b6f72",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	" ",
																	" ",
																	"pm.test(\"Successful GET request\", function () {",
																	"    pm.expect(pm.response.code).to.eql(200)});",
																	"    ",
																	"",
																	"if(responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'RFQ' || ",
																	"            responseJSONdata[i].status == 'Accepted by IP' ||",
																	"            responseJSONdata[i].status == 'Accepted by IC' || ",
																	"            responseJSONdata[i].status == 'Passed' ||",
																	"            responseJSONdata[i].status == 'Information Provided' || ",
																	"            responseJSONdata[i].status == 'Information Requested' ||",
																	"           responseJSONdata[i].status == 'Ended' || ",
																	"            responseJSONdata[i].status == 'Withdraw' ||",
																	"            responseJSONdata[i].status == 'Transaction Closed' || ",
																	"           responseJSONdata[i].status == 'Final Review' ||",
																	"            responseJSONdata[i].status == 'Declined' ||",
																	"             responseJSONdata[i].status == 'Quote' ||",
																	"            responseJSONdata[i].status == 'Quote Expired' ||",
																	"            responseJSONdata[i].status == 'Pending Review'||",
																	"            responseJSONdata[i].status == 'Transaction Ended')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "67ec5a5c-6d9e-4e53-842d-696c36075a7f",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_PendingQuotes/MinimumCount",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "cd2829e5-a803-4e70-bb41-823ff35941cf",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	" ",
																	" ",
																	"pm.test(\"Successful GET request\", function () {",
																	"    pm.expect(pm.response.code).to.eql(200)});",
																	"    ",
																	"",
																	"if(responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'RFQ' || ",
																	"            responseJSONdata[i].status == 'Accepted by IP' ||",
																	"            responseJSONdata[i].status == 'Accepted by IC' || ",
																	"            responseJSONdata[i].status == 'Passed' ||",
																	"            responseJSONdata[i].status == 'Information Provided' || ",
																	"            responseJSONdata[i].status == 'Information Requested' ||",
																	"           responseJSONdata[i].status == 'Ended' || ",
																	"            responseJSONdata[i].status == 'Withdraw' ||",
																	"            responseJSONdata[i].status == 'Transaction Closed' || ",
																	"           responseJSONdata[i].status == 'Final Review' ||",
																	"            responseJSONdata[i].status == 'Declined' ||",
																	"             responseJSONdata[i].status == 'Quote' ||",
																	"            responseJSONdata[i].status == 'Quote Expired' ||",
																	"            responseJSONdata[i].status == 'Pending Review'||",
																	"            responseJSONdata[i].status == 'Transaction Ended')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "a525e630-9ef4-4ff5-ba4f-9e4a8cdbf6aa",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes&count=1",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																},
																{
																	"key": "count",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_PendingQuotes/MaximumCount",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ec908a1a-1c5d-40da-a0d2-0d522f61eaf4",
																"exec": [
																	"  var responseJSONdata = JSON.parse(responseBody);\r",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
																	"        pm.expect(responseJSONdata.length).to.be.below(101);\r",
																	"    });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes&count=10",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																},
																{
																	"key": "count",
																	"value": "10"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_PendingQuotes/MinimumSkip",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "eff5b97f-d758-42ed-a143-867ab41c3a0e",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	" ",
																	" ",
																	"pm.test(\"Successful GET request\", function () {",
																	"    pm.expect(pm.response.code).to.eql(200)});",
																	"    ",
																	"",
																	"if(responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'RFQ' || ",
																	"            responseJSONdata[i].status == 'Accepted by IP' ||",
																	"            responseJSONdata[i].status == 'Accepted by IC' || ",
																	"            responseJSONdata[i].status == 'Passed' ||",
																	"            responseJSONdata[i].status == 'Information Provided' || ",
																	"            responseJSONdata[i].status == 'Information Requested' ||",
																	"           responseJSONdata[i].status == 'Ended' || ",
																	"            responseJSONdata[i].status == 'Withdraw' ||",
																	"            responseJSONdata[i].status == 'Transaction Closed' || ",
																	"           responseJSONdata[i].status == 'Final Review' ||",
																	"            responseJSONdata[i].status == 'Declined' ||",
																	"             responseJSONdata[i].status == 'Quote' ||",
																	"            responseJSONdata[i].status == 'Quote Expired' ||",
																	"            responseJSONdata[i].status == 'Pending Review'||",
																	"            responseJSONdata[i].status == 'Transaction Ended')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "423e501d-91a1-465c-82a5-0ee08be9294b",
																"exec": [
																	"pm.variables.set(\"skip\", 1);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes&skip=1",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																},
																{
																	"key": "skip",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_PendingQuotes/MaximumSkip",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f471ac55-4bc9-49d3-999e-daa96568c6a2",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	" ",
																	" ",
																	"pm.test(\"Successful GET request\", function () {",
																	"    pm.expect(pm.response.code).to.eql(200)});",
																	"    ",
																	"",
																	"if(responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'RFQ' || ",
																	"            responseJSONdata[i].status == 'Accepted by IP' ||",
																	"            responseJSONdata[i].status == 'Accepted by IC' || ",
																	"            responseJSONdata[i].status == 'Passed' ||",
																	"            responseJSONdata[i].status == 'Information Provided' || ",
																	"            responseJSONdata[i].status == 'Information Requested' ||",
																	"           responseJSONdata[i].status == 'Ended' || ",
																	"            responseJSONdata[i].status == 'Withdraw' ||",
																	"            responseJSONdata[i].status == 'Transaction Closed' || ",
																	"           responseJSONdata[i].status == 'Final Review' ||",
																	"            responseJSONdata[i].status == 'Declined' ||",
																	"             responseJSONdata[i].status == 'Quote' ||",
																	"            responseJSONdata[i].status == 'Quote Expired' ||",
																	"            responseJSONdata[i].status == 'Pending Review'||",
																	"            responseJSONdata[i].status == 'Transaction Ended')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "3b46d375-f199-49ee-aa06-3ff93df55ba6",
																"exec": [
																	"pm.variables.set(\"skip\", 0);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes&skip={{skip}}",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																},
																{
																	"key": "skip",
																	"value": "{{skip}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "ApprovedLimits",
											"item": [
												{
													"name": "Get_ApprovedLimits",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "45a5c009-d13a-430a-a8d1-d5abec5bd364",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	" ",
																	"",
																	"pm.test(\"Successful GET request\", function () {",
																	"    pm.expect(pm.response.code).to.eql(200)});",
																	"     ",
																	"",
																	"if(responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'Bound' || ",
																	"            responseJSONdata[i].status == 'Inactive' ||",
																	"            responseJSONdata[i].status == 'Coverage Expired' || ",
																	"            responseJSONdata[i].status == 'Cancelled by IC' ||",
																	"            responseJSONdata[i].status == 'Cancelled by IP')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_ApprovedLimits/MinimumCount",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "145503d9-a705-47df-b685-30d617ad15f7",
																"exec": [
																	"var responseJSONdata = JSON.parse(responseBody);\r",
																	"\r",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
																	"        pm.expect(responseJSONdata.length).to.be.below(2);\r",
																	"    });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit&count=1",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																},
																{
																	"key": "count",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_ApprovedLimits/MaximumCount",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "576cafa4-7121-4040-93d4-36bd27857c70",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	" ",
																	"",
																	"pm.test(\"Successful GET request\", function () {",
																	"    pm.expect(pm.response.code).to.eql(200)});",
																	"     ",
																	"",
																	"if(responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'Bound' || ",
																	"            responseJSONdata[i].status == 'Inactive' ||",
																	"            responseJSONdata[i].status == 'Coverage Expired' || ",
																	"            responseJSONdata[i].status == 'Cancelled by IC' ||",
																	"            responseJSONdata[i].status == 'Cancelled by IP')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit&count=100",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																},
																{
																	"key": "count",
																	"value": "100"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_ApprovedLimits/MinimumSkip",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f95fee01-4357-40e1-baa4-0aa730c10306",
																"exec": [
																	"var responseJSONdata = JSON.parse(responseBody);",
																	"",
																	"if(pm.response.code == 200 & responseBody !== '')",
																	"{",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"        pm.expect(responseJSONdata.length).to.be.below(101);",
																	"    });",
																	"}",
																	"else",
																	"{",
																	"    pm.test(\"Blank response body!\");",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "7cfcb110-0717-4078-82ce-6ff005b0ab1d",
																"exec": [
																	"pm.variables.set(\"skip\", 1);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit&skip={{skip}}",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																},
																{
																	"key": "skip",
																	"value": "{{skip}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_ApprovedLimits/MaximumSkip",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4c463bfe-3fa4-4460-8dbe-abbf373ff961",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	" ",
																	"",
																	"pm.test(\"Successful GET request\", function () {",
																	"    pm.expect(pm.response.code).to.eql(200)});",
																	"     ",
																	"",
																	"if(responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'Bound' || ",
																	"            responseJSONdata[i].status == 'Inactive' ||",
																	"            responseJSONdata[i].status == 'Coverage Expired' || ",
																	"            responseJSONdata[i].status == 'Cancelled by IC' ||",
																	"            responseJSONdata[i].status == 'Cancelled by IP')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "81dfee89-2f35-487f-921c-c6fcb317f62e",
																"exec": [
																	"pm.variables.set(\"skip\", 100);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit&count={{skip}}",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																},
																{
																	"key": "count",
																	"value": "{{skip}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Activity Monitor",
							"item": [
								{
									"name": "Get_ActivityMonitor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71c533a3-9703-49d6-b9e1-96befec488cd",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200)});\r",
													"    \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"To check Activity Monitor details is not null (transactionId,insuredPartyId,productCode,leadingQuoteStateName,carriersCount,quotesCount,createdBy,createdOn,updatedBy,updatedOn,originalQuoteSummary,mostRecentQuoteSummary,statusSummary)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].transactionId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].insuredPartyId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].productCode).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].leadingQuoteStateName).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].carriersCount).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].quotesCount).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].createdBy).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].createdOn).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].updatedBy).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].updatedOn).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].originalQuoteSummary).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].mostRecentQuoteSummary).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].statusSummary).to.not.eql(null);\r",
													"\r",
													"    }         \r",
													"    \r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/ActivityMonitor",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"ActivityMonitor"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ActivityMonitor By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "059eb3fa-2e7e-4b69-bbd6-73c719bbab9e",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200)});\r",
													"    \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"To check Activity Monitor details is not null (transactionId,insuredPartyId,productCode,leadingQuoteStateName,carriersCount,quotesCount,createdBy,createdOn,updatedBy,updatedOn,originalQuoteSummary,mostRecentQuoteSummary,statusSummary)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].transactionId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].insuredPartyId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].productCode).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].leadingQuoteStateName).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].carriersCount).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].quotesCount).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].createdBy).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].createdOn).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].updatedBy).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].updatedOn).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].originalQuoteSummary).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].mostRecentQuoteSummary).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].statusSummary).to.not.eql(null);\r",
													"\r",
													"    }         \r",
													"    \r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88ec9e9d-dd46-4667-87c0-477cd7f79166",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/ActivityMonitor\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var responseJSONdata = res.json();\r",
													"    var i=Math.floor((Math.random() * responseJSONdata.length) + 1);\r",
													"    pm.variables.set(\"transId\",responseJSONdata[i].transactionId);\r",
													"\r",
													" \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/ActivityMonitor/{{transId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"ActivityMonitor",
												"{{transId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transactions",
							"item": [
								{
									"name": "Get_Transactions By ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28794371-51f9-459e-a3b4-8007983cbaee",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Transaction details are not null (id,insuredPartyId,brokerId,product,maxCreditLimitRfq,indemnityRfq,insuredParty,transactionAccountDebtors)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].insuredPartyId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].brokerId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].product).to.not.eql(null);\r",
													"       pm.expect(responseJSONdata[i].maxCreditLimitRfq).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].indemnityRfq).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].insuredParty).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].transactionAccountDebtors).to.not.eql(null);\r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06a2b271-dd29-4e48-891c-6bb9961809a6",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    pm.variables.set(\"QuoteId\", jsonData[0].quoteId);\r",
													"    pm.variables.set(\"TRANSID\",jsonData[0].transId);\r",
													"    \r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Transactions/{{TRANSID}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Transactions",
												"{{TRANSID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Transactions`s Average Premium Rate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1964c810-1434-433e-84fe-647e954348ce",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Average Premium details are not null (count, averagePremiumRate)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].count).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].averagePremiumRate).to.not.eql(null);\r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66efd59c-b169-4dcf-bc93-1c7014bc47f7",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/quotes?screenname=approvedlimit\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"\r",
													"\r",
													"     pm.variables.set(\"TRANSID\",jsonData[i].transId);\r",
													"    \r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Transactions/{{TRANSID}}/averagepremiumrate",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Transactions",
												"{{TRANSID}}",
												"averagepremiumrate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Transactions`s Average Premium Rate Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab10e6af-fdd7-470b-a177-035968d408ad",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Average Premium details are not null (count, averagePremiumRate)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].count).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].averagePremiumRate).to.not.eql(null);\r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1ba42c6-22f2-4a79-a2f4-b5966256c6d4",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/ActivityMonitor\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"\r",
													"\r",
													"     pm.variables.set(\"TRANSID\",jsonData[i].transactionId);\r",
													"    \r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Transactions/{{TRANSID}}/quotesrespondedbyic",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Transactions",
												"{{TRANSID}}",
												"quotesrespondedbyic"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Transactions logs By ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dda0b283-0fe6-4293-88b0-42abe21da752",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Transaction details are not null (transactionId,quoteId,status,participantId,participantName,timestamp)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].transactionId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].quoteId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].status).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].participantId).to.not.eql(null);\r",
													"       pm.expect(responseJSONdata[i].participantName).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].timestamp).to.not.eql(null);\r",
													"     \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4b9c95dd-966b-4118-82a0-b71016bb3790",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"}, function (err, res) {\r",
													"    var jsonData = res.json();\r",
													"    pm.variables.set(\"QuoteId\", jsonData[0].quoteId);\r",
													"    pm.variables.set(\"TRANSID\",jsonData[0].transId);\r",
													"    \r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Transactions/{{TRANSID}}/logs",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Transactions",
												"{{TRANSID}}",
												"logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91ff340d-a600-4761-99e3-5feb4a176b87",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200)});\r",
													"    \r",
													"\r",
													"\r",
													"pm.test(\"To check Transaction details is not null (transactionId,insuredPartyId,brokerId,coBrokerId,productId,maxCreditLimitRfq,indemnityRfq,currencyCodeRfq,requestCancellableByIpRfq,updatedOn,attachmentPeriodRfq)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].insuredPartyId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].brokerId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].coBrokerId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].productId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].maxCreditLimitRfq).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].indemnityRfq).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].currencyCodeRfq).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].requestCancellableByIpRfq).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].updatedOn).to.not.eql(null);\r",
													"        pm.expect(responseJSONdata[i].attachmentPeriodRfq).to.not.eql(null);\r",
													"\r",
													"    }         \r",
													"    \r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Transactions",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Transactions"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Notifications",
							"item": [
								{
									"name": "Flow: Create and Delete",
									"item": [
										{
											"name": "Post_Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dfab5d60-6f3d-4b22-81fd-b4799e0aca62",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f1cfe64e-cc92-4c78-a543-1fb9adf1b4fc",
														"exec": [
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/InsuredParties\");\r",
															"\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
															"              }\r",
															"      \r",
															"}, function (err, res) {\r",
															"    \r",
															"   var responseJSONdata = res.json();\r",
															" \r",
															"\r",
															"     for (var i = 0; i < responseJSONdata.length; i++) {\r",
															"     \r",
															"             if (responseJSONdata[i].name === pm.environment.get('InsPartyName')){\r",
															"                 pm.environment.set(\"ParticipantID\", responseJSONdata[i].id);\r",
															"                 \r",
															"             } \r",
															"         }\r",
															"\r",
															"       let email=_.random(1000)+ 'Test' + '@gmail.com';\r",
															"         pm.environment.set(\"Email\",email);\r",
															"         console.log(email);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"email\": \"{{Email}}\",\n        \"subscriptions\": [\n            {\n                \"subscriptionTypeId\": 1,\n                \"subscriptionType\": \"NewTransactionCreated\"\n            }\n        ],\n        \"participants\": [\n            {\n                \"participantId\": {{ParticipantID}},\n                \"participantRole\": \"InsuredParty\",\n                \"participantName\": \"\"\n            }\n        ]\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/notifications",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"notifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete_Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f89bf49-98be-4a8e-ab7b-03b13aa53d1a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a446ac39-8083-4d42-8015-c485766d53e7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\"ALiquidx2020@gmail.com\"]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Notifications",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Notifications"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Flow: Create and Delete By EmailId",
									"item": [
										{
											"name": "Post_Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3b95468c-6e8e-4474-baaa-cf751c76b77b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0c1290cd-142b-498b-9acc-c4f2e348bead",
														"exec": [
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/InsuredParties\");\r",
															"\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
															"              }\r",
															"      \r",
															"}, function (err, res) {\r",
															"    \r",
															"   var responseJSONdata = res.json();\r",
															" \r",
															"\r",
															"     for (var i = 0; i < responseJSONdata.length; i++) {\r",
															"     \r",
															"             if (responseJSONdata[i].name === pm.environment.get('InsPartyName')){\r",
															"                 pm.environment.set(\"ParticipantID\", responseJSONdata[i].id);\r",
															"                 \r",
															"             } \r",
															"         }\r",
															"\r",
															"       let email=_.random(1000)+ 'Test' + '@gmail.com';\r",
															"         pm.environment.set(\"Email\",email);\r",
															"         console.log(email);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"email\": \"{{Email}}\",\n        \"subscriptions\": [\n            {\n                \"subscriptionTypeId\": 1,\n                \"subscriptionType\": \"NewTransactionCreated\"\n            }\n        ],\n        \"participants\": [\n            {\n                \"participantId\": {{ParticipantID}},\n                \"participantRole\": \"InsuredParty\",\n                \"participantName\": \"\"\n            }\n        ]\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/notifications",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"notifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete_Notifications By Email",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3aeb6a69-40f9-48a1-a0a2-002e7c11fb11",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c4e2a96a-91d3-4978-9ee2-c9d0f6f616e9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseURI}}/api/Notifications/ALiquidx2020@gmail.com",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Notifications",
														"ALiquidx2020@gmail.com"
													],
													"query": [
														{
															"key": "email",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Flow: Create, Edit and Delete",
									"item": [
										{
											"name": "Post_Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1516d8d9-b30a-42ef-9464-d92279729c78",
														"exec": [
															"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8364eb2d-e4e3-437e-9b60-71e325385469",
														"exec": [
															"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/InsuredParties\");\r",
															"\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
															"              }\r",
															"      \r",
															"}, function (err, res) {\r",
															"    \r",
															"   var responseJSONdata = res.json();\r",
															" \r",
															"\r",
															"     for (var i = 0; i < responseJSONdata.length; i++) {\r",
															"     console.log(responseJSONdata[i].name);\r",
															"             if (responseJSONdata[i].name === pm.environment.get('InsPartyName')){\r",
															"               console.log(responseJSONdata[i].id);\r",
															"                pm.variables.set(\"ParticipantID\", responseJSONdata[i].id);\r",
															"                \r",
															"                 \r",
															"             } \r",
															"         }\r",
															"\r",
															"       let email=_.random(1000)+ 'Test' + '@gmail.com';\r",
															"         pm.variables.set(\"Email\",email);\r",
															"         console.log(email);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"email\": \"{{Email}}\",\n        \"subscriptions\": [\n            {\n                \"subscriptionTypeId\": 1,\n                \"subscriptionType\": \"NewTransactionCreated\"\n            }\n        ],\n        \"participants\": [\n            {\n                \"participantId\": {{ParticipantID}},\n                \"participantRole\": \"InsuredParty\",\n                \"participantName\": \"\"\n            }\n        ]\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/notifications",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"notifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put_Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f6dd1d2-1928-4bf8-a2f9-8c1fc9ee52bd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "74324758-ca58-4b7d-a823-c03dbd8eb9b7",
														"exec": [
															"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"email\": \"{{Email}}\",\n        \"subscriptions\": [\n            {\n                \"subscriptionTypeId\": 1,\n                \"subscriptionType\": \"NewTransactionCreated\"\n            },\n            {\n                \"subscriptionTypeId\": 2,\n                \"subscriptionType\": \"InfoRequested\"\n            }\n        ],\n        \"participants\": [\n            {\n                \"participantId\": {{ParticipantID}},\n                \"participantRole\": \"InsuredParty\",\n                \"participantName\": \"\"\n            }\n        ]\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Notifications",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Notifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete_Notifications",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab8589e7-9b79-48fc-a25f-3a9dde6f8ddd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8a62c319-a61a-4ebf-87da-e006487d117f",
														"exec": [
															"setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\"{{Email}}\"]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Notifications",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Notifications"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get_Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "deb0d0d0-52af-4a36-9755-2f16f1a15254",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Notifications details are not null (email,subscriptionTypeId,subscriptionType)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].email).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].subscriptionTypeId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].subscriptionType).to.not.eql(null);\r",
													"     \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Notifications",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Notifications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Notifications Types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bc9a7cf-8dce-49e4-a42f-5a43ca6ddc35",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200)});\r",
													"\r",
													"if(responseBody !== '')\r",
													"{\r",
													"    if(responseJSONdata.length > 0)\r",
													"    {\r",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);\r",
													"        console.log(\"length ==\"+responseJSONdata.length)\r",
													"        for (i = 0; i < responseJSONdata.length; i++)\r",
													"        {\r",
													"            var confirmname = false;\r",
													"            if (responseJSONdata[i].name == 'NewTransactionCreated' || \r",
													"            responseJSONdata[i].name == 'InfoRequested' ||\r",
													"            responseJSONdata[i].name == 'InfoProvided' || \r",
													"            responseJSONdata[i].name == 'PendingReview' ||\r",
													"              responseJSONdata[i].name == 'Quote' ||\r",
													"            responseJSONdata[i].name == 'AcceptedbyIP' || \r",
													"            responseJSONdata[i].name == 'Declined' ||\r",
													"              responseJSONdata[i].name == 'TransactionEnded' ||\r",
													"            responseJSONdata[i].name == 'RFQPassed' || \r",
													"            responseJSONdata[i].name == 'QuoteWithdrawn' ||\r",
													"             responseJSONdata[i].name == 'QuoteExpired' ||\r",
													"              responseJSONdata[i].name == 'AmendmentRequest' ||\r",
													"            responseJSONdata[i].name == 'LastLookQuoteAccepted' || \r",
													"            responseJSONdata[i].name == 'CancelledbyIP' ||\r",
													"               responseJSONdata[i].name == 'CancelledbyIC' ||\r",
													"            responseJSONdata[i].name == 'ICAmendment' ||\r",
													"            responseJSONdata[i].name == 'CoverageExpired' ||\r",
													"            responseJSONdata[i].name == 'IcAlert' ||\r",
													"           responseJSONdata[i].name =='ApprovedLimitExpiration'\r",
													"            )\r",
													"            {\r",
													"                confirmname = true;\r",
													"            }\r",
													"            var name=responseJSONdata[i].name;\r",
													"            console.log(\"type value is :\"+responseJSONdata[i].name);\r",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {\r",
													"                pm.expect(confirmname).to.be.true;\r",
													"            });\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/notifications/types",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"notifications",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Notifications By Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "360cfd72-ff82-45ce-8b28-d81290db359b",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Notifications details are not null (email,subscriptionTypeId,subscriptionType)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].email).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].subscriptionTypeId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].subscriptionType).to.not.eql(null);\r",
													"     \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ad5a5ce-0c53-4dd0-870e-80535076654e",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Notifications\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"}, function (err, res) {\r",
													"    \r",
													"    var jsonData = res.json();\r",
													"    var x = Math.floor((Math.random() * 2) + 1);\r",
													"    pm.variables.set(\"email\", jsonData[x].email);\r",
													"  \r",
													"     \r",
													"    \r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Notifications/{{email}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Notifications",
												"{{email}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{accessTokenIP}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d058e737-4f6a-4333-91b7-fcf2bc00592e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a169a87-92e1-4ec5-8c6a-62d36753d9d4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "IC_User",
					"item": [
						{
							"name": "Lookups",
							"item": [
								{
									"name": "Get_AttachmentPeriodType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bdae0170-13a4-4063-9668-2f56c23f5445",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76e82d43-28f8-4f37-9057-65088c166aae",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													" for (var i=0;   i<jsonData.length;  i++)",
													" { ",
													"    var expectedAttachmentPeriodType = ['Date of Receipt by AD', 'Invoice Date','Date Financial Purchase Asset','Supplier Shipment Date'];",
													"    pm.test(\"To Check whether attachment period type \"+ jsonData[i].name +\" is present\", function () {",
													"      pm.expect(expectedAttachmentPeriodType).to.include( jsonData[i].name); ",
													"    });",
													" }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/attachmentperiodtypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"attachmentperiodtypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_PremiumBasisTypes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b1e4b3a9-23b3-430d-8243-6dac220c31c0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3e02028e-6ae4-4fc3-8098-04e939aa2245",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.eql(200)});",
													"",
													"if(responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'GROSS LIMIT' || ",
													"            responseJSONdata[i].name == 'INSURABLE SALES' ||",
													"            responseJSONdata[i].name == 'MONTH END A/R BALANCES' || ",
													"            responseJSONdata[i].name == 'MONTH END GROSS EXPOSURE' || ",
													"             responseJSONdata[i].name == 'MONTH END NET EXPOSURE' ||",
													"            responseJSONdata[i].name == 'NET LIMIT' ||",
													"            responseJSONdata[i].name == 'MONTHLY PEAK A/R'||",
													"            responseJSONdata[i].name == 'UTILIZATION'",
													"            ",
													"           ",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"Premium Basis Type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/premiumbasistypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"premiumbasistypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_QuoteType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "692bb8f3-f011-43fd-bda9-a65c9e897b46",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c18694e-7c31-45bf-aefb-46c569a2f4d8",
												"exec": [
													" var responseJSONdata = JSON.parse(responseBody);",
													"",
													"if(pm.response.code == 200 & responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"            pm.expect(responseJSONdata.length).to.be.below(101);",
													"        });",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmName = false;",
													"            if (responseJSONdata[i].name == 'Firm' || ",
													"            responseJSONdata[i].name == 'Last Look')",
													"            {",
													"                confirmName = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"Name value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmName).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/quotetypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"quotetypes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SPCarrierRatings",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d35a522e-44e6-4b87-871e-5f6c7d8a4276",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c7580507-01be-4ae6-b04e-c113029190a2",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"if(pm.response.code == 200 & responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"            pm.expect(responseJSONdata.length).to.be.below(101);",
													"        });",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'AAA' || ",
													"            responseJSONdata[i].name == 'AA+' ||",
													"            responseJSONdata[i].name == 'AA' || ",
													"            responseJSONdata[i].name == 'AA-' ||",
													"            responseJSONdata[i].name == 'A+' || ",
													"          responseJSONdata[i].name == 'A' ||",
													"           responseJSONdata[i].name == 'A-' || ",
													"            responseJSONdata[i].name == 'BBB+' ||",
													"            responseJSONdata[i].name == 'BBB' || ",
													"           responseJSONdata[i].name == 'BBB-' ||",
													"            responseJSONdata[i].name == 'BB+' ||",
													"             responseJSONdata[i].name == 'BB' ||",
													"            responseJSONdata[i].name == 'BB-' ||",
													"            responseJSONdata[i].name == 'B+'||",
													"            responseJSONdata[i].name == 'B'||",
													"            responseJSONdata[i].name == 'B-'||",
													"            responseJSONdata[i].name == 'CCC+'||",
													"            responseJSONdata[i].name == 'CCC'||",
													"            responseJSONdata[i].name == 'CCC-'||",
													"            responseJSONdata[i].name == 'CC'||",
													"            responseJSONdata[i].name == 'C'||",
													"            responseJSONdata[i].name == 'D'",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"state value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/spcarrierrating",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"spcarrierrating"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_AmbestCarrierRating",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fc5c84c-f733-47f4-ba35-aa46a91ce714",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"if(pm.response.code == 200 & responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
													"            pm.expect(responseJSONdata.length).to.be.below(101);",
													"        });",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'A++' || ",
													"            responseJSONdata[i].name == 'A+' ||",
													"            responseJSONdata[i].name == 'A' || ",
													"            responseJSONdata[i].name == 'A-' ||",
													"            responseJSONdata[i].name == 'B++' || ",
													"          responseJSONdata[i].name == 'B+' ||",
													"           responseJSONdata[i].name == 'B' || ",
													"            responseJSONdata[i].name == 'B-' ||",
													"            responseJSONdata[i].name == 'C++' || ",
													"           responseJSONdata[i].name == 'C+' ||",
													"            responseJSONdata[i].name == 'C' ||",
													"             responseJSONdata[i].name == 'C-' ||",
													"            responseJSONdata[i].name == 'D' ||",
													"            responseJSONdata[i].name == 'E'||",
													"            responseJSONdata[i].name == 'F'",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"state value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/ambestcarrierrating",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"ambestcarrierrating"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_QuoteDeclineType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c49b04d-1ec1-4150-a47a-3b7b808fe063",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);",
													"",
													"if(pm.response.code == 200 & responseBody !== '')",
													"{",
													"    if(responseJSONdata.length > 0)",
													"    {",
													"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length);",
													"        console.log(\"length ==\"+responseJSONdata.length)",
													"        for (i = 0; i < responseJSONdata.length; i++)",
													"        {",
													"            var confirmname = false;",
													"            if (responseJSONdata[i].name == 'Buyer Risk' || ",
													"            responseJSONdata[i].name == 'Capacity Constraints'|| ",
													"            responseJSONdata[i].name == 'Country Risk'|| ",
													"            responseJSONdata[i].name == 'Geography'|| ",
													"            responseJSONdata[i].name == 'Insufficient credit procedures'|| ",
													"            responseJSONdata[i].name == 'Insufficient information to quote'|| ",
													"            responseJSONdata[i].name == 'Loss history'|| ",
													"            responseJSONdata[i].name == 'Other'|| ",
													"            responseJSONdata[i].name == 'Payment Terms'|| ",
													"            responseJSONdata[i].name == 'Pricing'|| ",
													"            responseJSONdata[i].name == 'Sector Risk'|| ",
													"            responseJSONdata[i].name == 'Size'|| ",
													"            responseJSONdata[i].name == 'Structure'|| ",
													"            responseJSONdata[i].name == 'Unable to cover key buyers'|| ",
													"            responseJSONdata[i].name == 'Unable to provide requested structure'",
													"            )",
													"            {",
													"                confirmname = true;",
													"            }",
													"            var name=responseJSONdata[i].name;",
													"            console.log(\"Quote Type value is :\"+responseJSONdata[i].name);",
													"            pm.test(\"Validating response data element: \" + i + \" for name->\" +name, function() {",
													"                pm.expect(confirmname).to.be.true;",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/quotedeclinetypes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"quotedeclinetypes"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Notifications",
							"item": [
								{
									"name": "Get_Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9cd0c7c-b4a0-4b72-907d-b0a0576148af",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Notifications details are not null (email,subscriptionTypeId,subscriptionType)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].email).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].subscriptionTypeId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].subscriptionType).to.not.eql(null);\r",
													"     \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b777d1f4-c137-4d2c-82e5-ec2b7584f320",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Notifications",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Notifications"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Quotes",
							"item": [
								{
									"name": "Quotes By Id",
									"item": [
										{
											"name": "Get_Pendingquotes",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ba9d30f4-4a95-4586-ba2f-946771cb3a44",
														"exec": [
															"var responseJSONdata = JSON.parse(responseBody);",
															"",
															"if(pm.response.code == 200 & responseBody !== '')",
															"{",
															"    if(responseJSONdata.length > 0)",
															"    {",
															"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
															"            pm.expect(responseJSONdata.length).to.be.below(101);",
															"        });",
															"        console.log(\"length ==\"+responseJSONdata.length)",
															"        for (i = 0; i < responseJSONdata.length; i++)",
															"        {",
															"            var confirmState = false;",
															"            if (responseJSONdata[i].status == 'RFQ' || ",
															"            responseJSONdata[i].status == 'Accepted by IP' ||",
															"            responseJSONdata[i].status == 'Accepted by IC' || ",
															"            responseJSONdata[i].status == 'Passed' ||",
															"            responseJSONdata[i].status == 'Information Provided' || ",
															"            responseJSONdata[i].status == 'Information Requested' ||",
															"           responseJSONdata[i].status == 'Ended' || ",
															"            responseJSONdata[i].status == 'Withdraw' ||",
															"            responseJSONdata[i].status == 'Transaction Closed' || ",
															"           responseJSONdata[i].status == 'Final Review' ||",
															"            responseJSONdata[i].status == 'Declined' ||",
															"             responseJSONdata[i].status == 'Quote' ||",
															"            responseJSONdata[i].status == 'Quote Expired' ||",
															"            responseJSONdata[i].status == 'Pending Review' ||",
															"            responseJSONdata[i].status == 'Transaction Ended'",
															"            )",
															"            {",
															"                confirmState = true;",
															"            }",
															"            var status=responseJSONdata[i].status;",
															"            console.log(\"state value is :\"+responseJSONdata[i].status);",
															"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
															"                pm.expect(confirmState).to.be.true;",
															"            });",
															"        }",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"quotes"
													],
													"query": [
														{
															"key": "screenname",
															"value": "pendingquotes"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_Approvedlimit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c5b03926-6df9-4e4c-a869-12ff9e9fac4a",
														"exec": [
															" var responseJSONdata = JSON.parse(responseBody);",
															"",
															"if(pm.response.code == 200 & responseBody !== '')",
															"{",
															"    if(responseJSONdata.length > 0)",
															"    {",
															"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
															"            pm.expect(responseJSONdata.length).to.be.below(101);",
															"        });",
															"        console.log(\"length ==\"+responseJSONdata.length)",
															"        for (i = 0; i < responseJSONdata.length; i++)",
															"        {",
															"            var confirmState = false;",
															"            if (responseJSONdata[i].status == 'Bound' || ",
															"            responseJSONdata[i].status == 'Inactive' ||",
															"            responseJSONdata[i].status == 'Coverage Expired' || ",
															"            responseJSONdata[i].status == 'Cancelled by IC' ||",
															"            responseJSONdata[i].status == 'Cancelled by IP')",
															"            {",
															"                confirmState = true;",
															"            }",
															"            var status=responseJSONdata[i].status;",
															"            console.log(\"state value is :\"+responseJSONdata[i].status);",
															"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
															"                pm.expect(confirmState).to.be.true;",
															"            });",
															"        }",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"quotes"
													],
													"query": [
														{
															"key": "screenname",
															"value": "approvedlimit"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Quotes By ScreenName",
									"item": [
										{
											"name": "PendingQuotes",
											"item": [
												{
													"name": "Get_PendingQuotes",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b024455f-7b5b-4a32-8c4c-3437e6078bbd",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	"",
																	"if(pm.response.code == 200 & responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'RFQ' || ",
																	"            responseJSONdata[i].status == 'Accepted by IP' ||",
																	"            responseJSONdata[i].status == 'Accepted by IC' || ",
																	"            responseJSONdata[i].status == 'Passed' ||",
																	"            responseJSONdata[i].status == 'Information Provided' || ",
																	"            responseJSONdata[i].status == 'Information Requested' ||",
																	"           responseJSONdata[i].status == 'Ended' || ",
																	"            responseJSONdata[i].status == 'Withdraw' ||",
																	"            responseJSONdata[i].status == 'Transaction Closed' || ",
																	"           responseJSONdata[i].status == 'Final Review' ||",
																	"            responseJSONdata[i].status == 'Declined' ||",
																	"             responseJSONdata[i].status == 'Quote' ||",
																	"            responseJSONdata[i].status == 'Quote Expired' ||",
																	"            responseJSONdata[i].status == 'Pending Review'||",
																	"            responseJSONdata[i].status == 'Transaction Ended')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "fe4be198-45d8-4cc3-a7a0-966741c0b446",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_PendingQuotes/MinimumCount",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b4eda4e6-4624-44eb-83a4-92a9d858fb2d",
																"exec": [
																	"var responseJSONdata = JSON.parse(responseBody);\r",
																	"\r",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
																	"        pm.expect(responseJSONdata.length).to.be.below(2);\r",
																	"    });\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "7dc4b7a4-f34f-4b94-99a6-793203ad3623",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes&count=1",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																},
																{
																	"key": "count",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_PendingQuotes/MaximumCount",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b3f3029b-69cb-4158-a153-a71e2dacdba9",
																"exec": [
																	"  var responseJSONdata = JSON.parse(responseBody);\r",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
																	"        pm.expect(responseJSONdata.length).to.be.below(101);\r",
																	"    });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes&count=10",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																},
																{
																	"key": "count",
																	"value": "10"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_PendingQuotes/MinimumSkip",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3ba745a1-037f-4c8e-9fc6-d507e4a9d129",
																"exec": [
																	"var responseJSONdata = JSON.parse(responseBody);",
																	"",
																	"if(pm.response.code == 200 & responseBody !== '')",
																	"{",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"        pm.expect(responseJSONdata.length).to.be.below(101);",
																	"    });",
																	"}",
																	"else",
																	"{",
																	"    pm.test(\"Blank response body!\");",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "2b56e5a2-671b-40cf-9cbf-2cfaa0664065",
																"exec": [
																	"pm.variables.set(\"skip\", 1);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes&skip={{skip}}",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																},
																{
																	"key": "skip",
																	"value": "{{skip}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_PendingQuotes/MaximumSkip",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a12c7a25-7f76-427b-83a9-940a57984092",
																"exec": [
																	"var responseJSONdata = JSON.parse(responseBody);",
																	"",
																	"if(pm.response.code == 200 & responseBody !== '')",
																	"{",
																	"  //  pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"  //      pm.expect(responseJSONdata.length).to.be();",
																	"   // });",
																	"}",
																	"else",
																	"{",
																	"    pm.test(\"Blank response body!\");",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "04d6862a-2dba-40f7-945f-e53f24ff6d0f",
																"exec": [
																	"pm.variables.set(\"skip\", 10);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=pendingquotes&skip={{skip}}",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "pendingquotes"
																},
																{
																	"key": "skip",
																	"value": "{{skip}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "ApprovedLimits",
											"item": [
												{
													"name": "Get_ApprovedLimits",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4da14bcb-28a7-48e7-8a4f-25928504dded",
																"exec": [
																	" var responseJSONdata = JSON.parse(responseBody);",
																	"",
																	"if(pm.response.code == 200 & responseBody !== '')",
																	"{",
																	"    if(responseJSONdata.length > 0)",
																	"    {",
																	"        pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"            pm.expect(responseJSONdata.length).to.be.below(101);",
																	"        });",
																	"        console.log(\"length ==\"+responseJSONdata.length)",
																	"        for (i = 0; i < responseJSONdata.length; i++)",
																	"        {",
																	"            var confirmState = false;",
																	"            if (responseJSONdata[i].status == 'Bound' || ",
																	"            responseJSONdata[i].status == 'Inactive' ||",
																	"            responseJSONdata[i].status == 'Coverage Expired' || ",
																	"            responseJSONdata[i].status == 'Cancelled by IC' ||",
																	"            responseJSONdata[i].status == 'Cancelled by IP')",
																	"            {",
																	"                confirmState = true;",
																	"            }",
																	"            var status=responseJSONdata[i].status;",
																	"            console.log(\"state value is :\"+responseJSONdata[i].status);",
																	"            pm.test(\"Validating response data element: \" + i + \" for state->\" +status, function() {",
																	"                pm.expect(confirmState).to.be.true;",
																	"            });",
																	"        }",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_ApprovedLimits/MinimumCount",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a02a938c-fb3e-42c1-ae8c-a97f46cdd361",
																"exec": [
																	"var responseJSONdata = JSON.parse(responseBody);\r",
																	"\r",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
																	"        pm.expect(responseJSONdata.length).to.be.below(2);\r",
																	"    });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit&count=1",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																},
																{
																	"key": "count",
																	"value": "1"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_ApprovedLimits/MaximumCount",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0d2c51f9-11d8-4e47-ad31-2779339d3f78",
																"exec": [
																	"  var responseJSONdata = JSON.parse(responseBody);\r",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
																	"        pm.expect(responseJSONdata.length).to.be.below(101);\r",
																	"    });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit&count=100",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																},
																{
																	"key": "count",
																	"value": "100"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_ApprovedLimits/MinimumSkip",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "91ec05f3-eae3-4c85-82f3-944a6421fa27",
																"exec": [
																	"var responseJSONdata = JSON.parse(responseBody);",
																	"",
																	"if(pm.response.code == 200 & responseBody !== '')",
																	"{",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"        pm.expect(responseJSONdata.length).to.be.below(101);",
																	"    });",
																	"}",
																	"else",
																	"{",
																	"    pm.test(\"Blank response body!\");",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c932d572-aa93-4d53-b461-b701a5b6f6d5",
																"exec": [
																	"pm.variables.set(\"skip\", 1);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit&skip={{skip}}",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																},
																{
																	"key": "skip",
																	"value": "{{skip}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get_ApprovedLimits/MaximumSkip",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9dacb770-0da3-4543-a46f-27b3dfd43b7c",
																"exec": [
																	"var responseJSONdata = JSON.parse(responseBody);",
																	"",
																	"if(pm.response.code == 200 & responseBody !== '')",
																	"{",
																	"    pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){",
																	"        pm.expect(responseJSONdata.length).to.be.below(101);",
																	"    });",
																	"}",
																	" "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e6d55787-15fa-4eb7-9aa5-4761f6fd5bf5",
																"exec": [
																	"pm.variables.set(\"skip\", 100);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseURI}}/api/quotes?screenname=approvedlimit&count={{skip}}",
															"host": [
																"{{baseURI}}"
															],
															"path": [
																"api",
																"quotes"
															],
															"query": [
																{
																	"key": "screenname",
																	"value": "approvedlimit"
																},
																{
																	"key": "count",
																	"value": "{{skip}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{accessTokenIC}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac706a1b-1227-45a2-9323-29337cfd298f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0673e41b-9b2a-4b76-896a-50515dbd1522",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "285259cf-b040-4810-a0b9-6d772331d729",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ddc5b873-37db-4669-95bf-b070246b29ab",
						"type": "text/javascript",
						"exec": [
							"if(pm.response.code == 200)",
							"{",
							"    console.log(\"responseBody\", responseBody);",
							"    if (responseBody != null)",
							"    {",
							"        if (responseBody =='[]' || responseBody == '{}')",
							"        {",
							"             tests[\"Body is empty \" + responseBody]= false;",
							"        }",
							"        else {",
							"          tests[\"Body is not empty\"]= true;",
							"        }",
							"    }",
							"    else",
							"    {",
							"          tests[\"Body is empty\" + responseBody]= false;",
							"    }",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Version",
			"item": [
				{
					"name": "Get_Verison",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/api/Versions",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"api",
								"Versions"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "IP_User",
					"item": [
						{
							"name": "Download",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenIP}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://lqx-insurance-qa-fn.azurewebsites.net/api/Download?assetid=0&fileid=1349b9c8-bc68-4de1-9069-dbca7bd44b72&productCode=INS",
									"protocol": "https",
									"host": [
										"lqx-insurance-qa-fn",
										"azurewebsites",
										"net"
									],
									"path": [
										"api",
										"Download"
									],
									"query": [
										{
											"key": "assetid",
											"value": "0"
										},
										{
											"key": "fileid",
											"value": "1349b9c8-bc68-4de1-9069-dbca7bd44b72"
										},
										{
											"key": "productCode",
											"value": "INS"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{accessTokenIP}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d846d1e5-9d14-4054-8166-88c765c57400",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8497f480-2f63-40d5-b280-de0a7b404e54",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "IC_User",
					"item": [
						{
							"name": "Quotes",
							"item": [
								{
									"name": "Withdrawn",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": 154\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/withdrawn",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"withdrawn"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Upload",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "/C:/Users/dahakea/Downloads/image.png"
										},
										{
											"key": "",
											"type": "file",
											"src": []
										},
										{
											"key": "",
											"type": "file",
											"src": []
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "https://lqx-insurance-qa-fn.azurewebsites.net/api/Upload?assetid=485&assettype=quote&stateid=2&state=Quote&description=Test2&productcode=INS&assetDetailId=983",
									"protocol": "https",
									"host": [
										"lqx-insurance-qa-fn",
										"azurewebsites",
										"net"
									],
									"path": [
										"api",
										"Upload"
									],
									"query": [
										{
											"key": "assetid",
											"value": "485"
										},
										{
											"key": "assettype",
											"value": "quote"
										},
										{
											"key": "stateid",
											"value": "2"
										},
										{
											"key": "state",
											"value": "Quote"
										},
										{
											"key": "description",
											"value": "Test2"
										},
										{
											"key": "productcode",
											"value": "INS"
										},
										{
											"key": "assetDetailId",
											"value": "983"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_InsuranceCaarrier/ Subsidiaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f3cd772-7778-431a-8769-441873c2b37f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" try {",
											"",
											"    var responseJSONdata = JSON.parse(responseBody);",
											"",
											"pm.test(\"To check InsuredParty details is not null (id,name,isSelected,isActive)\", function () {",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        pm.expect(responseJSONdata[i].id).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].name).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].isSelected).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].isActive).to.not.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {",
											"    pm.expect(responseJSONdata.length).to.be.above(0);",
											"});",
											"}",
											"catch (e) {",
											"",
											"    if (responseBody == '') {",
											"        pm.test(\"Empty body response\", () => { throw new Error(e.message) });",
											"    }",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/InsuranceCarriers/IcSubsidiaries",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"InsuranceCarriers",
										"IcSubsidiaries"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{accessTokenIC}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1f5247d-f09c-4701-b52a-6d5cef095df7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b99a253-8b13-4dfc-ae1b-51b23c64622f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Flow",
					"item": [
						{
							"name": "Flow: Pass Quotes",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fd51339d-882c-4239-aeac-4a58dfdb1040",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"              }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d83afd0f-798b-4d5b-90ac-4b1202ce3c19",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.environment.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{InsCarrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"supplementalFileIds\": ,\n    \"seller\": null\n    \n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "819627cd-dab3-45fc-9f57-f5c24905aaf0",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes&transId='TRANSID'\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.environment.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                   pm.variables.set(\"quoteTypeId\", _.random(1,2));",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.environment.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.environment.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.environment.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0b8c7a11-5ee9-4b46-b3d3-b17f5616a83a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Passed_By_IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dc19c8e-0b25-466b-b0af-caf98d10c6f1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ffa7356-9bd1-450a-a134-e3f76722854f",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/passedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"passedbyip"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7afa9b75-0af3-4d36-83b7-36b94429b0bb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4caac3f5-5036-43c4-b798-7c88fb1128d4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Request Additional Information",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c434a035-8e3d-4dd0-b9db-7446f7685bfa",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "effa0cbd-1ae7-411c-98bb-7c8d254749a0",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.environment.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Information Requested",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "24ee9f80-70fb-4c62-a5e4-ee395500979d",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.environment.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                   pm.variables.set(\"quoteTypeId\", _.random(1,2));",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.environment.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.environment.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.environment.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2831ca41-e178-45f3-8ff9-5b2d5dfda065",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Information Provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1f4bda6-8bf2-48fc-8ae1-09ff57be5a79",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9be93610-be9b-4837-9c78-11d77d106360",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/passedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"passedbyip"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec41c63c-42af-4d6a-a512-38116b0e3bb2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fe1e118e-b010-4efd-94f5-4e21059d46ec",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Flag As Pending Review",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a581cdf8-d888-4e0e-bfb1-9c629dcd5f23",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "355b5ed3-fbe6-42d1-b72f-f30b6e3d9b8f",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.environment.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": {{brokerId}},\n    \"coBrokerId\": {{coBrokerId}},\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"maxCreditLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Flag as Pending Review",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "02050fc6-8ad4-49f4-8b39-7cc36c50f073",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.environment.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                   pm.variables.set(\"quoteTypeId\", _.random(1,2));",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.environment.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.environment.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.environment.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "57f1b373-ef2f-499b-974b-f136c38d2b01",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"quoteId\": {{QUOTE}},\n    \"quoteTypeId\": {{quoteTypeId}} ,\n\t\"premiumBasisTypeId\": {{premiumBasisTypeId}},\n\t\"quotedLimit\": {{maxCreditLimit}},\n\t\"indemnity\": {{indemnity}},\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n\t\"attachmentPeriod\": {{attachmentPeriod}},\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}\", \n    \"premiumRateByIc\": {{premiumRateByIc}},\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\n\n    \"isCancellableByIc\": true,\n    \"minPremiumAmount\": 1000,\n    \"minDepositAmount\": null,\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\n    \"icPaper\": \"insurance paper\",\n    \"icQuoteId\": null,\n    \"commissionRate\":{{commission}},\n    \"daysToQuoteExpiration\": 30,\n    \"deductibleByIc\": {{deductibleByIp}},\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\n    \"carrierRatingByAmBestId\": null,\n    \"carrierRatingBySpId\": null,\n    \"carrierRatingByOther\": null,\n    \"havingSubjectivity\": true,\n    \"estimatedPremium\": {{estimatedPremium}},\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\n    \"estimatedCoBrokerCommission\":{{estimatedCOBrokerComission}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/pendingreview",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"pendingreview"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Modify RFQ",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6abf64e8-896f-4c44-be74-565191e7a2f9",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ab818857-1440-4524-aad7-9c90a4962d75",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.environment.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Flag as Pending Review",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ed9f37b1-de5c-400d-8972-0383ed3ec156",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.environment.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                   pm.variables.set(\"quoteTypeId\", _.random(1,2));",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.environment.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.environment.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.environment.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "17353963-ae92-46fb-9b93-dca4357f090b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"quoteId\": {{QUOTE}},\n    \"quoteTypeId\": {{quoteTypeId}},\n\t\"premiumBasisTypeId\": {{premiumBasisTypeId}},\n\t\"quotedLimit\": {{maxCreditLimit}},\n\t\"indemnity\": {{indemnity}},\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n\t\"attachmentPeriod\": {{attachmentPeriod}},\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}\", \n    \"premiumRateByIc\": {{premiumRateByIc}},\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\n\n    \"isCancellableByIc\": true,\n    \"minPremiumAmount\": 1000,\n    \"minDepositAmount\": null,\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\n    \"icPaper\": \"insurance paper\",\n    \"icQuoteId\": null,\n    \"commissionRate\":{{commission}},\n    \"daysToQuoteExpiration\": 30,\n    \"deductibleByIc\": {{deductibleByIp}},\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\n    \"carrierRatingByAmBestId\": null,\n    \"carrierRatingBySpId\": null,\n    \"carrierRatingByOther\": null,\n    \"havingSubjectivity\": true,\n    \"estimatedPremium\": {{estimatedPremium}},\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\n    \"estimatedCoBrokerCommission\":{{estimatedCOBrokerComission}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/pendingreview",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"pendingreview"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify RFQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76aa4067-9c22-4bcb-b6ec-547cba3af4cb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c0e3c06e-a81d-46b2-8f63-b5eff70c26e3",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"  ",
													"  pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));",
													"   pm.variables.set(\"indemnity\", _.random(1,99));",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));",
													"   pm.variables.set(\"brokerId\", _.random(1,10));",
													"   pm.variables.set(\"coBrokerId\", _.random(1,10));",
													"   pm.variables.set(\"deductibleByIc\", _.random(100,100000));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"quoteId\": {{QUOTE}},\n\"premiumBasisTypeId\":{{premiumBasisTypeId}}, \n\"quotedLimit\": {{maxCreditLimit}}, \n\"attachmentPeriod\": {{attachmentPeriod}},\n\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n\"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}\", \n\"carrierRatingByOther\": null,\n\"commissionRate\": {{commission}},\n\"deductibleByIc\": {{deductibleByIc}},\n\n\"estimatedBrokerCommission\": {{estimatedBrokerComission}},\n\"estimatedCoBrokerCommission\":{{estimatedCOBrokerComission}},\n\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n\"estimatedPremium\": {{estimatedPremium}},\n\"havingSubjectivity\": true,\n\"icQuoteId\": null,\n\"indemnity\": {{indemnity}},\n\"isCancellableByIc\": true,\n\n\"minDepositAmount\": null,\n\"minPremiumAmount\": null,\n\n\"premiumFundingDeadline\": null,\n\n\n\"quoteTypeId\": 2,\n\"unutilizedRateAnnum\": null,\n\"utilizedRateAnnum\": null,\n\"currencyCode\":\"USD\",\n\"estimatedWeightedPaymentTerm\":1\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/modifyrfq",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"modifyrfq"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Decline Quote (Last Look)",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fc416fa1-d02f-43ae-a6bc-41a456d12bc3",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													" //  pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0628e8a-81c4-49de-b375-9a87f5814348",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.environment.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62d21060-5be8-4b99-897e-bd0a1558b02a",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.environment.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                   pm.variables.set(\"quoteTypeId\", _.random(2,2));",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.environment.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.environment.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.environment.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e08deaf8-6cb9-4ecd-8872-fbc57c83c354",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52bba2f9-ea8e-407b-9701-3eed62466435",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "da887cca-b62d-46f8-99cd-adb074cc153c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Decline_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea5ac731-1cf3-4217-b55f-cae5e9e7d5c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ee1ce800-0c21-4da6-9857-590ebecafe4d",
												"exec": [
													" pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteDeclineTypeId\": 1,\r\n  \"decliningReason\": \"Sector Risk\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/decline",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"decline"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Withdraw Quote",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d28bf9f7-2ad6-403d-ad6e-53f96ec6ef69",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "502acb67-2b40-4d6d-b9e3-ff894168f7c8",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.environment.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "de248055-c7b4-4ccb-943c-4af8c470a317",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.environment.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                   pm.variables.set(\"quoteTypeId\", _.random(2,2));",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.environment.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.environment.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.environment.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c4fc32bb-dde9-4ce5-8c6a-b25aa7dcb534",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7aa7fae0-44f7-4ad9-bdbf-4a4a748b8eeb",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "41e3aee1-a93d-4f27-ac2b-1a85970db478",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n  }\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Withdrawn",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84bc76fe-7ba1-4d9a-ad5b-03b74dc4f268",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3cec5e2a-1798-4f6d-97e3-73e43d471823",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/withdrawn",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"withdrawn"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Accepted By IP",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3d8af018-a663-4f78-b902-9edd68d1255c",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "759be7f2-35f7-43de-b7c0-fed18260b2b2",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.environment.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1e0cae5e-17bc-4edc-9415-5ec496e9029c",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.environment.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                   pm.variables.set(\"quoteTypeId\", _.random(1,2));",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.environment.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.environment.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.environment.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b84be4b2-b2a5-4956-9cf6-b0ce842ee0cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bc4981bc-4c0b-4bb3-ba52-73986357c9c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6f872e23-1284-42e9-87d7-ce616d0d5eb0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Accepted By IC",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "50d2e78b-1187-4014-a975-cfbeb4970554",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "076cb640-195e-4949-a5e5-9cf0d3e4345c",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.environment.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "24738ec1-6bf8-4813-8dd0-9136e41eb06f",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.environment.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                   pm.variables.set(\"quoteTypeId\", _.random(2,2));",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.environment.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.environment.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.environment.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "576a341e-dc00-487b-acc5-8b3aa3109d48",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a3c097a7-e4b4-4d66-aa42-20272c914076",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8f0e9f4a-174f-42d1-8913-898a1e73a87b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted By IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6991d925-7489-464a-9738-6023188c35ea",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df65114b-4bd8-4b8c-828d-bd9a8900e220",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyic",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyic"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow:End Transaction",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb738002-6512-4b57-b64c-202acc74beef",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7d615555-f7cb-4c5d-9873-9eb556dfadc1",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.variables.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "End Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4bf5be2-bb06-4aeb-bcb6-61148275ec6c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "37ab24b7-aa49-4983-a218-aa3e385feeb8",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"    var url = pm.variables.get(\"baseURI\");",
													"    url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"    ",
													"    pm.sendRequest({",
													"        url: url,",
													"        method: 'GET',",
													"        header: {",
													"            'Accept': 'application/json',",
													"            'Content-Type': 'application/json',",
													"            'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"          }",
													"    }, function (err, res) {",
													"        var responseJSONdata = res.json();",
													"       ",
													"        if (res !== '') {",
													"            for (var i = 0; i < responseJSONdata.length; i++) {",
													"                 if (responseJSONdata[i].transId === pm.environment.get('TRANSID')){",
													"                    let quote =  responseJSONdata[i].quoteId;",
													"                     pm.environment.set(\"QUOTE\", quote);",
													"                     console.log(quote);",
													"                     break;",
													"                 }",
													"            }",
													"        }",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"transactionId\": {{TRANSID}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/endtransaction",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"endtransaction"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Ammend Request By IP",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1c0983c1-fdd6-4c08-b689-d6edce25554c",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3acb0fa9-7916-48bb-8d54-d616e75949e0",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.variables.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d59fd02-8b21-4345-a7ed-802264f73bc7",
												"exec": [
													"setTimeout(function() {}, pm.variables.get(\"stateChangeDelay\"));\r",
													"\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");\r",
													"\r",
													"function round(value, decimals) {\r",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\r",
													"}\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenIP\")\r",
													"    }\r",
													"}, function(err, res) {\r",
													"    var responseJSONdata = res.json();\r",
													"\r",
													"    if (res !== '') {\r",
													"        for (var i = 0; i < responseJSONdata.length; i++) {\r",
													"            if (responseJSONdata[i].transId === pm.variables.get('TRANSID')) {\r",
													"                let quote = responseJSONdata[i].quoteId;\r",
													"                pm.variables.set(\"QUOTE\", quote);\r",
													"                console.log(quote);\r",
													"\r",
													"                pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);\r",
													"                pm.variables.set(\"quoteTypeId\", _.random(2, 2));\r",
													"                pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);\r",
													"                pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);\r",
													"                pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);\r",
													"                pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);\r",
													"                pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);\r",
													"                pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);\r",
													"                pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);\r",
													"                pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);\r",
													"                pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);\r",
													"\r",
													"                let utilizedRatePA = pm.variables.get(\"utilizedRatePA\") // 2.5;\r",
													"\r",
													"                let unUtilizedRatePA = pm.variables.get(\"unUtilizedRatePA\"); //3.5;\r",
													"                let commission = pm.variables.get(\"commission\"); // 17.5;\r",
													"\r",
													"\r",
													"                let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod); //\t485\r",
													"                let maxCreditLimit = responseJSONdata[i].maxCreditLimit;\r",
													"                let ratePA = responseJSONdata[i].premiumRateByIp;\r",
													"                let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;\r",
													"                var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;\r",
													"                let premiumBasis = responseJSONdata[i].premiumBasisType.id;\r",
													"\r",
													"                if (premiumBasis === 1) //Gross Limit\r",
													"                {\r",
													"                    //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A\r",
													"                    let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"\r",
													"                    estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);\r",
													"                    //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)\r",
													"                    estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (premiumBasis === 2) //Net Limit\r",
													"                {\r",
													"                    //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360\r",
													"                    let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity / 100) * (ratePA / 100)) * riskPeriod) / 360;\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"\r",
													"                    estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);\r",
													"                    //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)\r",
													"                    estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) { //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"\r",
													"                    // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)\r",
													"                    let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t\r",
													"                    estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                    estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"\r",
													"                    // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)\r",
													"                    let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t\r",
													"                    estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                    estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                }\r",
													"\r",
													"                pm.variables.set(\"estimatedPremium\", estimatedPremium);\r",
													"                pm.variables.set(\"estimatedBrokerComission\", estimatedBrokerComission);\r",
													"                pm.variables.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);\r",
													"                console.log(\"commission - \", commission);\r",
													"                console.log(\"utilizedRatePA - \", utilizedRatePA);\r",
													"                console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);\r",
													"                console.log(\"estimatedPremium - \", estimatedPremium);\r",
													"                console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);\r",
													"                console.log(\"estimatedBrokerComission - \", estimatedCOBrokerComission);\r",
													"\r",
													"                let moment = require('moment');\r",
													"                let fundingDate = moment().add(10, 'days');\r",
													"                console.log(\"Funding Date\", fundingDate);\r",
													"                pm.environment.set(\"premiumFundingDeadline\", fundingDate);\r",
													"                break;\r",
													"\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c9ecd04-5f67-4f24-b227-2a84e60d39b9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a25332d3-3a66-4e98-9a75-00ed97888038",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bec9693-1780-451f-86db-9eaf8573bd76",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted By IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "876c9a0e-fdc6-42c8-b373-cc3501b10e3b",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5a78260c-699c-438a-acd0-609f53ff5275",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyic",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyic"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ammend Coverage By IP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "697132aa-7251-462b-83b2-18472e3b1832",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"  ",
													"  pm.variables.set(\"quoteTypeId\",_.random(1,2));",
													"    pm.variables.set(\"premiumRateByIc\",_.random(200,4000));    ",
													"    pm.variables.set(\"minPremiumAmount\",_.random(1000,5000));       ",
													"    pm.variables.set(\"minDepositAmount\",_.random(1000,5000));        ",
													"    pm.variables.set(\"daysToQuoteExpiration\",_.random(1,30));       ",
													"    pm.variables.set(\"deductableByIc\",_.random(500,1000));        ",
													"    pm.variables.set(\"estimatedPremium\",_.random(1000,30000));",
													"",
													"   ",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));",
													"   pm.variables.set(\"indemnity\", _.random(1,99));",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));",
													"   pm.variables.set(\"brokerId\", _.random(1,10));",
													"   pm.variables.set(\"coBrokerId\", _.random(1,10));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2d9d0bd8-4a3d-4873-9cb7-024dfb2a2f5a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"quotedLimit\": {{maxCreditLimit}},\r\n  \"premiumRateByIc\": {{premiumRateByIc}},\r\n  \"utilizedRateAnnum\": 0,\r\n  \"unutilizedRateAnnum\": 0,\r\n  \"isCancellableByIc\": {{isCancellable}},\r\n  \"minPremiumAmount\": {{minPremiumAmount}},\r\n  \"minDepositAmount\": {{minDepositAmount}},\r\n  \"premiumFundingDeadline\": \"2019-11-12T23:14:44.099Z\",\r\n  \"icPaper\": \"IcPaper\",\r\n  \"icQuoteId\": \"IcQuoteId\",\r\n  \"commissionRate\": 2.45,\r\n  \"daysToQuoteExpiration\": {{daysToQuoteExpiration}},\r\n  \"estimatedMaxPaymentTerm\":{{estimatedMaxPaymentTerm}},\r\n  \"deductableByIc\": {{deductableByIc}},\r\n  \"decuctablePercentageByIc\": 3,\r\n  \"currencyCode\":\"USD\",\r\n  \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\r\n  \"carrierRatingByAmBestId\": 25,\r\n  \"carrierRatingBySpId\": 7,\r\n  \"carrierRatingByOther\": \"carrierRatingByOther\",\r\n  \"havingSubjectivity\": true,\r\n  \"subjectivity\": \"reason subjectivity\",\r\n  \"estimatedPremium\": {{estimatedPremium}},\r\n  \"estimatedBrokerCommission\": 1332.13,\r\n  \"estimatedCoBrokerCommission\": 1332.13,\r\n  \"attachmentPeriod\":1,\r\n  \"premiumBasisTypeId\":1,\r\n  \"attachmentPeriodTypeId\":3,\r\n  \"attachmentPeriodStartDate\":\"2019-11-12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/amendmentrequestbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"amendmentrequestbyip"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: End Ammend Request By IP",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "43b8a80d-ac9f-40ac-9629-540b10bb39df",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ab87d60d-5ad4-4042-89c9-d17639d8df35",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.variables.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8343e4ab-ff76-4bb8-90b3-4c1014c8ae2b",
												"exec": [
													"setTimeout(function() {}, pm.variables.get(\"stateChangeDelay\"));\r",
													"\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");\r",
													"\r",
													"function round(value, decimals) {\r",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\r",
													"}\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenIP\")\r",
													"    }\r",
													"}, function(err, res) {\r",
													"    var responseJSONdata = res.json();\r",
													"\r",
													"    if (res !== '') {\r",
													"        for (var i = 0; i < responseJSONdata.length; i++) {\r",
													"            if (responseJSONdata[i].transId === pm.variables.get('TRANSID')) {\r",
													"                let quote = responseJSONdata[i].quoteId;\r",
													"                pm.variables.set(\"QUOTE\", quote);\r",
													"                console.log(quote);\r",
													"\r",
													"                pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);\r",
													"                pm.variables.set(\"quoteTypeId\", _.random(2, 2));\r",
													"                pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);\r",
													"                pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);\r",
													"                pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);\r",
													"                pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);\r",
													"                pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);\r",
													"                pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);\r",
													"                pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);\r",
													"                pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);\r",
													"                pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);\r",
													"\r",
													"                let utilizedRatePA = pm.variables.get(\"utilizedRatePA\") // 2.5;\r",
													"\r",
													"                let unUtilizedRatePA = pm.variables.get(\"unUtilizedRatePA\"); //3.5;\r",
													"                let commission = pm.variables.get(\"commission\"); // 17.5;\r",
													"\r",
													"\r",
													"                let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod); //\t485\r",
													"                let maxCreditLimit = responseJSONdata[i].maxCreditLimit;\r",
													"                let ratePA = responseJSONdata[i].premiumRateByIp;\r",
													"                let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;\r",
													"                var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;\r",
													"                let premiumBasis = responseJSONdata[i].premiumBasisType.id;\r",
													"\r",
													"                if (premiumBasis === 1) //Gross Limit\r",
													"                {\r",
													"                    //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A\r",
													"                    let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"\r",
													"                    estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);\r",
													"                    //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)\r",
													"                    estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (premiumBasis === 2) //Net Limit\r",
													"                {\r",
													"                    //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360\r",
													"                    let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity / 100) * (ratePA / 100)) * riskPeriod) / 360;\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"\r",
													"                    estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);\r",
													"                    //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)\r",
													"                    estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) { //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"\r",
													"                    // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)\r",
													"                    let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t\r",
													"                    estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                    estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"\r",
													"                    // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)\r",
													"                    let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t\r",
													"                    estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                    estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                }\r",
													"\r",
													"                pm.variables.set(\"estimatedPremium\", estimatedPremium);\r",
													"                pm.variables.set(\"estimatedBrokerComission\", estimatedBrokerComission);\r",
													"                pm.variables.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);\r",
													"                console.log(\"commission - \", commission);\r",
													"                console.log(\"utilizedRatePA - \", utilizedRatePA);\r",
													"                console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);\r",
													"                console.log(\"estimatedPremium - \", estimatedPremium);\r",
													"                console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);\r",
													"                console.log(\"estimatedBrokerComission - \", estimatedCOBrokerComission);\r",
													"\r",
													"                let moment = require('moment');\r",
													"                let fundingDate = moment().add(10, 'days');\r",
													"                console.log(\"Funding Date\", fundingDate);\r",
													"                pm.environment.set(\"premiumFundingDeadline\", fundingDate);\r",
													"                break;\r",
													"\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4fa7c12c-1785-491f-acca-4ef143939a4d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e2549b1e-c0e0-4d1b-860c-b3baed8a94dd",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1c7cd64a-a4f8-4af3-b0ca-39886f93538c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted By IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ed8fbcda-2e7f-4cb3-8b27-6bd220afb152",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9419da8d-1b55-4668-af9f-52a46aa08be1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyic",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyic"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ammend Coverage By IP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "95d25e62-9787-4502-8f26-7f6a0cf8b42a",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"  ",
													"  pm.variables.set(\"quoteTypeId\",_.random(1,2));",
													"    pm.variables.set(\"premiumRateByIc\",_.random(200,4000));    ",
													"    pm.variables.set(\"minPremiumAmount\",_.random(1000,5000));       ",
													"    pm.variables.set(\"minDepositAmount\",_.random(1000,5000));        ",
													"    pm.variables.set(\"daysToQuoteExpiration\",_.random(1,30));       ",
													"    pm.variables.set(\"deductableByIc\",_.random(500,1000));        ",
													"    pm.variables.set(\"estimatedPremium\",_.random(1000,30000));",
													"",
													"   ",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));",
													"   pm.variables.set(\"indemnity\", _.random(1,99));",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));",
													"   pm.variables.set(\"brokerId\", _.random(1,10));",
													"   pm.variables.set(\"coBrokerId\", _.random(1,10));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7d645f5-2b8e-43b7-84b2-f555cc30322b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"quotedLimit\": {{maxCreditLimit}},\r\n  \"premiumRateByIc\": {{premiumRateByIc}},\r\n  \"utilizedRateAnnum\": 0,\r\n  \"unutilizedRateAnnum\": 0,\r\n  \"isCancellableByIc\": {{isCancellable}},\r\n  \"minPremiumAmount\": {{minPremiumAmount}},\r\n  \"minDepositAmount\": {{minDepositAmount}},\r\n  \"premiumFundingDeadline\": \"2019-11-12T23:14:44.099Z\",\r\n  \"icPaper\": \"IcPaper\",\r\n  \"icQuoteId\": \"IcQuoteId\",\r\n  \"commissionRate\": 2.45,\r\n  \"daysToQuoteExpiration\": {{daysToQuoteExpiration}},\r\n  \"estimatedMaxPaymentTerm\":{{estimatedMaxPaymentTerm}},\r\n  \"deductableByIc\": {{deductableByIc}},\r\n  \"decuctablePercentageByIc\": 3,\r\n  \"currencyCode\":\"USD\",\r\n  \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\r\n  \"carrierRatingByAmBestId\": 25,\r\n  \"carrierRatingBySpId\": 7,\r\n  \"carrierRatingByOther\": \"carrierRatingByOther\",\r\n  \"havingSubjectivity\": true,\r\n  \"subjectivity\": \"reason subjectivity\",\r\n  \"estimatedPremium\": {{estimatedPremium}},\r\n  \"estimatedBrokerCommission\": 1332.13,\r\n  \"estimatedCoBrokerCommission\": 1332.13,\r\n  \"attachmentPeriod\":1,\r\n  \"premiumBasisTypeId\":1,\r\n  \"attachmentPeriodTypeId\":3,\r\n  \"attachmentPeriodStartDate\":\"2019-11-12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/amendmentrequestbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"amendmentrequestbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "End Ammendment By IP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f61f22f3-1725-4dd6-99fc-fba653194e24",
												"exec": [
													"setTimeout(function() {}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenIP\")",
													"    }",
													"}, function(err, res) {",
													"    var responseJSONdata = res.json();",
													"",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"            if (responseJSONdata[i].transId === pm.variables.get('TRANSID')) {",
													"                let quote = responseJSONdata[i].quoteId;",
													"                pm.variables.set(\"QUOTE\", quote);",
													"                     }",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b75a8c7b-7f34-484f-a377-b58d2e0e4af1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}},\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/quotes/endamendmentbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"quotes",
												"endamendmentbyip"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Coverage Cancel By IP",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b9faf43-d110-4dce-aea3-93ae17543bc5",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1fdf7bba-9eee-4b06-811b-0e7987661d3a",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.variables.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b3b5bb1f-4819-4905-a0b8-1d8bbe7cfe1c",
												"exec": [
													"setTimeout(function() {}, pm.variables.get(\"stateChangeDelay\"));\r",
													"\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");\r",
													"\r",
													"function round(value, decimals) {\r",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\r",
													"}\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer ' + pm.variables.get(\"accessTokenIP\")\r",
													"    }\r",
													"}, function(err, res) {\r",
													"    var responseJSONdata = res.json();\r",
													"\r",
													"    if (res !== '') {\r",
													"        for (var i = 0; i < responseJSONdata.length; i++) {\r",
													"            if (responseJSONdata[i].transId === pm.variables.get('TRANSID')) {\r",
													"                let quote = responseJSONdata[i].quoteId;\r",
													"                pm.variables.set(\"QUOTE\", quote);\r",
													"                console.log(quote);\r",
													"\r",
													"                pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);\r",
													"                pm.variables.set(\"quoteTypeId\", 2);\r",
													"                pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);\r",
													"                pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);\r",
													"                pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);\r",
													"                pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);\r",
													"                pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);\r",
													"                pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);\r",
													"                pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);\r",
													"                pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);\r",
													"                pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);\r",
													"\r",
													"                let utilizedRatePA = pm.variables.get(\"utilizedRatePA\") // 2.5;\r",
													"                let unUtilizedRatePA = pm.variables.get(\"unUtilizedRatePA\"); //3.5;\r",
													"                let commission = pm.variables.get(\"commission\"); // 17.5;\r",
													"\r",
													"                let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod); //\t485\r",
													"                let maxCreditLimit = responseJSONdata[i].maxCreditLimit;\r",
													"                let ratePA = responseJSONdata[i].premiumRateByIp;\r",
													"                let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;\r",
													"                var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;\r",
													"                let premiumBasis = responseJSONdata[i].premiumBasisType.id;\r",
													"\r",
													"                if (premiumBasis === 1) //Gross Limit\r",
													"                {\r",
													"                    //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A\r",
													"                    let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"\r",
													"                    estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);\r",
													"                    //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)\r",
													"                    estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (premiumBasis === 2) //Net Limit\r",
													"                {\r",
													"                    //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360\r",
													"                    let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity / 100) * (ratePA / 100)) * riskPeriod) / 360;\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"\r",
													"                    estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);\r",
													"                    //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)\r",
													"                    estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) { //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"\r",
													"                    // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)\r",
													"                    let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t\r",
													"                    estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                    estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                }\r",
													"\r",
													"                if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"\r",
													"                    // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)\r",
													"                    let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);\r",
													"                    estimatedPremium = round(premium, 2);\r",
													"                    //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t\r",
													"                    estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                    estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);\r",
													"                }\r",
													"\r",
													"                pm.variables.set(\"estimatedPremium\", estimatedPremium);\r",
													"                pm.variables.set(\"estimatedBrokerComission\", estimatedBrokerComission);\r",
													"                pm.variables.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);\r",
													"                console.log(\"inflow 2 commission - \", commission);\r",
													"                console.log(\"utilizedRatePA - \", utilizedRatePA);\r",
													"                console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);\r",
													"                console.log(\"estimatedPremium - \", estimatedPremium);\r",
													"                console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);\r",
													"                console.log(\"estimatedBrokerComission - \", estimatedCOBrokerComission);\r",
													"\r",
													"                let moment = require('moment');\r",
													"                let fundingDate = moment().add(10, 'days');\r",
													"                console.log(\"Funding Date\", fundingDate);\r",
													"                pm.environment.set(\"premiumFundingDeadline\", fundingDate);\r",
													"                break;\r",
													"\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a6fa731b-557d-4de4-9fc4-82664307b58e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": {{quoteTypeId}},\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c2bde23b-252e-4f5e-bf3d-3e7d895d1be7",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "11f307e6-cfce-4a80-9409-70feec66d9cf",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted By IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0f7747aa-e91a-4a85-860f-691a81d585b4",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b5aaccb-7001-48b6-aed9-11ae469ca7d6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyic",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyic"
											]
										}
									},
									"response": []
								},
								{
									"name": "Coverage Cancel By IP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dbb893f1-a229-4ac1-82d2-fc69526c1032",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a94cb7f4-b9eb-427f-84b3-8b9912b34fcc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}}\r\n }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/coveragecancelledbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"coveragecancelledbyip"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Coverage Cancel By IC",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6693687e-cd6c-49a7-8501-fbeedc2229b8",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0951706-6c12-49e3-bae0-6ec196d72867",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.variables.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cc401d73-1eef-454a-9fad-aadb2b051595",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.variables.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.variables.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                  // pm.variables.set(\"quoteTypeId\", 2);",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.variables.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.variables.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.variables.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5922146c-44dc-46da-bfc1-5802a754bc68",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": 2,\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}z\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "41c67c97-41f3-4656-b5ba-4ce230e99fa2",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6d1bf074-9ae4-4f87-8576-2bf71efb846c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted By IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "95e74dd1-67fa-4174-9179-77e986f3c45f",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83a713c2-1c6b-4ffa-971d-2d9b04d9afd0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyic",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyic"
											]
										}
									},
									"response": []
								},
								{
									"name": "Coverage Cancel By IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "80bca86c-81ff-40eb-8d4a-968e9db63050",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"  ",
													"     pm.variables.set(\"cancellableActionTypeId\", _.random(1,6));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d6350610-3d52-4a83-b22a-5ea09953d121",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"quoteId\": {{QUOTE}},\r\n  \"cancellableActionTypeId\": {{cancellableActionTypeId}},\r\n  \"reasonOfCancellableAction\": \"string\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/coveragecancelledbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"coveragecancelledbyip"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Flow: Ammend Coverage By IC",
							"item": [
								{
									"name": "Post_RFQ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dc1bdc95-fd9d-4b00-835a-410845f7c307",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Debtors\");\r",
													"\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"    \r",
													"    var url = pm.variables.get(\"baseURI\");\r",
													"    url = url.concat(\"/api/DnB?\");\r",
													"    var jsonData = res.json();\r",
													"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  // console.log(\"count \"+i);\r",
													"  // console.log(\"Sic:\"+jsonData[i]);\r",
													"  //  console.log(\"addressLine1:\"+jsonData[i].addressLine1);\r",
													"    pm.variables.set(\"duns\",jsonData[i].duns);\r",
													"    pm.variables.set(\"debtorName\",jsonData[i].name);    \r",
													"    pm.variables.set(\"sicCode\",jsonData[i].sicCode);       \r",
													"    pm.variables.set(\"addressLine1\",jsonData[i].addressLine1);        \r",
													"    pm.variables.set(\"city\",jsonData[i].city);       \r",
													"    pm.variables.set(\"stateProvince\",jsonData[i].stateProvince);        \r",
													"    pm.variables.set(\"postalCode\",jsonData[i].postalCode);\r",
													"    pm.variables.set(\"countryCode\",jsonData[i].countryCode);\r",
													"    pm.variables.set(\"countryId\",jsonData[i].country.id); \r",
													"    pm.variables.set(\"name\",jsonData[i].country.name);\r",
													"    pm.variables.set(\"id\",jsonData[i].id);\r",
													"    pm.variables.set(\"countryName\",jsonData[i].countryName);   \r",
													"   \r",
													"   pm.variables.set(\"premiumBasisTypeId\", _.random(1,6));\r",
													"   pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
													"   pm.variables.set(\"indemnity\", _.random(1,99));\r",
													"   pm.variables.set(\"estimatedWeightedPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"estimatedMaxPaymentTerm\", _.random(1,10));\r",
													"   pm.variables.set(\"attachmentPeriod\", _.random(1,20));\r",
													"   pm.variables.set(\"attachmentPeriodTypeId\", _.random(1,4));\r",
													"   pm.variables.set(\"isCancellable\", _.random(0,1));\r",
													"   //pm.variables.set(\"brokerId\", _.random(1,10));\r",
													"   //pm.variables.set(\"coBrokerId\", _.random(1,10));\r",
													" });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bacadac1-d2e0-43c3-b7aa-9ec293af15e1",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"   pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"  var jsonData= pm.response.json();",
													"  pm.expect(jsonData).to.be.a('number');",
													"});",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"var transId= pm.response.json();",
													"console.log(transId);",
													"pm.variables.set(\"TRANSID\",transId);",
													"//var QUOTE=pm.environment.get(\"qId\");",
													"//console.log(QUOTE);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtor\": {\n        \"duns\": \"{{duns}}\",\n        \"name\": \"{{debtorName}}\",\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"postalCode\": \"{{postalCode}}\",\n        \"city\": \"{{city}}\",\n        \"stateProvince\": \"{{stateProvince}}\",\n        \"countryCode\": \"{{countryCode}}\",\n        \"countryName\": \"{{name}}\",\n        \"detailsCountryName\": \"{{countryName}\",\n        \"phone\": null\n    },\n  \"carriersPolicy\": [\n    {\n      \"carrierId\": {{carrierId}},\n      \"carrierName\": \"{{carrierName}}\",\n\t  \"policyId\": \"{{policyId}}\"\n    }\n  ],\n\n    \"premiumBasisTypeId\": {{premiumBasisTypeId}},\n    \"quotedLimit\": {{maxCreditLimit}},\n    \"indemnity\": {{indemnity}},\n    \"estimatedWeightedPaymentTerm\": {{estimatedWeightedPaymentTerm}},\n    \"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\n    \"attachmentPeriod\": {{attachmentPeriod}},\n    \"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\n    \"attachmentPeriodStartDate\": \"2019-10-20T00:00:00\",\n    \"isCancellable\": {{isCancellable}},\n\n    \"currencyCode\": \"USD\",\n    \"productId\": 2,\n    \"premiumRateByIp\": 1,\n    \"estimatedUtilizedInputAmount\": null,\n    \"insuredAssetDescription\": null,\n    \"havingPastDueHistory\": false,\n    \"havingSpecialCondition\": false,\n    \"deductibleByIp\": null,\n    \"deductiblePercentageByIp\": null,\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"additionalInsured\": null,\n    \"lossPayee\": null,\n    \"requestCancellableByIp\": true,\n    \"additionalInfo\": null,\n    \"supplementalFileIds\": [],\n    \"seller\": null\n}\n\n\n\n\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/requestforquote",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"requestforquote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Submit_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ae4bdcd5-e867-4485-9f34-2e5e508657bb",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.variables.get('TRANSID')){",
													"                let quote =  responseJSONdata[i].quoteId;",
													"                 pm.variables.set(\"QUOTE\", quote);",
													"                 console.log(quote);",
													"                 ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                  // pm.variables.set(\"quoteTypeId\", 2);",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.variables.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.variables.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.variables.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);////z",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f649ca60-d55d-4bfb-80f3-3c6fad7cfda3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"     ",
													"});",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": 2,\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quotesubmit",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quotesubmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted_Quotes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c13ad413-52ba-4489-ad90-f6f8be503d2a",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "830ed6d0-da08-41d1-a5af-7d8bfa21420f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIP}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyip",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyip"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accepted By IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "79ccb9ff-74e4-4e7d-8435-04df16632f2c",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ba6f289-5010-4c7c-8884-59f319d0f95f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"quoteId\": {{QUOTE}}\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/quoteacceptedbyic",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"quoteacceptedbyic"
											]
										}
									},
									"response": []
								},
								{
									"name": "Ammend Coverage By IC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b26ae92-f59e-451a-8bab-e19079bb3014",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  ",
													"var url = pm.variables.get(\"baseURI\");",
													"url = url.concat(\"/api/quotes?screenname=pendingquotes\");",
													"",
													"function round(value, decimals) {",
													"    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);",
													"}",
													"",
													"",
													"pm.sendRequest({",
													"    url: url,",
													"    method: 'GET',",
													"    header: {",
													"        'Accept': 'application/json',",
													"        'Content-Type': 'application/json',",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")",
													"      }",
													"}, function (err, res) {",
													"    var responseJSONdata = res.json();",
													"   ",
													"    if (res !== '') {",
													"        for (var i = 0; i < responseJSONdata.length; i++) {",
													"             if (responseJSONdata[i].transId === pm.variables.get('TRANSID')){",
													"                               ",
													"                 pm.variables.set(\"premiumRateByIc\", responseJSONdata[i].premiumRateByIp);",
													"                  // pm.variables.set(\"quoteTypeId\", 2);",
													"            pm.variables.set(\"maxCreditLimit\", responseJSONdata[i].maxCreditLimit);",
													"            pm.variables.set(\"indemnity\", responseJSONdata[i].indemnity);",
													"            pm.variables.set(\"estimatedMaxPaymentTerm\", responseJSONdata[i].estimatedMaxPaymentTerm);",
													"            pm.variables.set(\"attachmentPeriod\", responseJSONdata[i].attachmentPeriod);",
													"            pm.variables.set(\"attachmentPeriodTypeId\", responseJSONdata[i].attachmentPeriodTypeId);",
													"            pm.variables.set(\"attachmentPeriodStartDate\", responseJSONdata[i].attachmentPeriodStartDate);",
													"            pm.variables.set(\"deductibleByIp\", responseJSONdata[i].deductibleByIp);",
													"            pm.variables.set(\"deductiblePercentageByIp\", responseJSONdata[i].deductiblePercentageByIp);",
													"            pm.variables.set(\"premiumBasisTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            pm.variables.set(\"cancellableActionTypeId\", responseJSONdata[i].premiumBasisTypeId);",
													"            ",
													"            let utilizedRatePA = pm.environment.get(\"utilizedRatePA\")// 2.5;",
													"            ",
													"            let unUtilizedRatePA = pm.environment.get(\"unUtilizedRatePA\");//3.5;",
													"            let commission = pm.environment.get(\"commission\");// 17.5;",
													"",
													"            ",
													"            ",
													"            let riskPeriod = (responseJSONdata[i].estimatedMaxPaymentTerm + responseJSONdata[i].attachmentPeriod);//\t485",
													"            let maxCreditLimit = responseJSONdata[i].maxCreditLimit;",
													"            let ratePA = responseJSONdata[i].premiumRateByIp;",
													"            let estimatedUtilizedInput = responseJSONdata[i].estimatedUtilizedInputAmount;",
													"            var estimatedPremium, estimatedBrokerComission, estimatedCOBrokerComission;",
													"            let premiumBasis =  responseJSONdata[i].premiumBasisType.id;",
													"",
													"if (premiumBasis === 1 ) //Gross Limit",
													"                        { ",
													"                              //Estimated Premium for Gross Limit = Credit Limit * (Longest Risk Period / 360 days) * Premium Rate P.A",
													"                             let premium = (maxCreditLimit * (riskPeriod / 360) * ratePA) / 100;",
													"                             estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                             estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                             estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2); ",
													"                        }",
													"",
													"                     if ( premiumBasis === 2) //Net Limit",
													"                        {",
													"                            //Estimated Premium for Gross Limit =  ((Maximum Credit Limit * Rate P.A.) * Risk Period)/360",
													"                            let premium = ((maxCreditLimit * (responseJSONdata[i].indemnity/100) * (ratePA/100)) * riskPeriod )/ 360;",
													"                            estimatedPremium = round(premium, 2);",
													"                             // Broker Commission\\t\\\"(Estimated Premium Amount * Commission Percentage)*(LiquidX Commission Share %) Note : Default LiquidX Commission Share % = 50% day one.\\\"",
													"                            estimatedBrokerComission = (((estimatedPremium * commission) * 0.5) / 100).toFixed(2);",
													"                             //Co-Broker Commission\\t(Estimated Premium Amount * Commission Percentage)*(1-LiquidX Commission Share %)",
													"                            estimatedCOBrokerComission = (((estimatedPremium * commission) * (1 - 0.5)) / 100).toFixed(2);",
													"                        }",
													"",
													"                     if (premiumBasis === 3 || premiumBasis === 4 || premiumBasis === 5) {  //3: \"INSURABLE SALES\",  4: \"MONTH END A/R BALANCES\", 5: \"MONTH END GROSS EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100)) * Risk Period)/360) + (((Maximum Credit Limit – Estimated Utilized Input) * (Unutilized Rate P.A./100) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + (((maxCreditLimit - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"",
													"                        if (responseJSONdata[i].premiumBasisType.id === 6) { //6: \"MONTH END NET EXPOSURE\"",
													"                            // (((Estimated Utilized Input* (Utilized Rate P.A./100))* Risk Period)/360) + ((((Maximum Credit Limit * (Indemnity %/100)) – Estimated Utilized Input) * (Unutilized Rate P.A./100)) * Risk Period)/360)",
													"                            let premium = (((estimatedUtilizedInput * (utilizedRatePA / 100)) * riskPeriod) / 360) + ((((maxCreditLimit * (responseJSONdata[i].indemnity / 100)) - estimatedUtilizedInput) * (unUtilizedRatePA / 100) * riskPeriod) / 360);",
													"                            estimatedPremium = round(premium, 2);",
													"                            //ESTIMATED BROKER COMMISSION\test premium amount * commission % / 2\t",
													"                            estimatedBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                            estimatedCOBrokerComission = (estimatedPremium * commission / 200).toFixed(2);",
													"                        }",
													"                        ",
													"                        pm.variables.set(\"estimatedPremium\", estimatedPremium);",
													"                        pm.variables.set(\"estimatedBrokerComission\", estimatedBrokerComission);",
													"                        pm.variables.set(\"estimatedCOBrokerComission\", estimatedCOBrokerComission);",
													"                        console.log(\"commission - \", commission);",
													"                        console.log(\"utilizedRatePA - \", utilizedRatePA);",
													"                        console.log(\"unUtilizedRatePA - \", unUtilizedRatePA);",
													"                        console.log(\"estimatedPremium - \",  estimatedPremium);",
													"                        console.log(\"estimatedBrokerComission - \", estimatedBrokerComission);",
													"                        console.log(\"estimatedBrokerComission - \",  estimatedCOBrokerComission);",
													"",
													"",
													"",
													"           ",
													"             ",
													"            let moment = require('moment');",
													"let fundingDate = moment().add(10, 'days');",
													"console.log(\"Funding Date\", fundingDate);",
													"pm.environment.set(\"premiumFundingDeadline\", fundingDate);////z",
													"                 break;",
													"                 ",
													"                 ",
													"             }",
													"        }",
													"        ",
													"    }",
													"    ",
													"});",
													" ",
													" ",
													" ",
													" ",
													" ",
													" ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9dfbb389-743c-4fe1-aab8-249a5fc69b2e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessTokenIC}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"quoteId\": {{QUOTE}},\r\n  \"quoteTypeId\": 2,\r\n  \"premiumBasisTypeId\": {{premiumBasisTypeId}},\r\n\t\"quotedLimit\": {{maxCreditLimit}},\r\n\t\"indemnity\": {{indemnity}},\r\n\t\"estimatedMaxPaymentTerm\": {{estimatedMaxPaymentTerm}},\r\n\t\"attachmentPeriod\": {{attachmentPeriod}},\r\n\t\"attachmentPeriodTypeId\": {{attachmentPeriodTypeId}},\r\n\t \"attachmentPeriodStartDate\":\"{{attachmentPeriodStartDate}}\", \r\n    \"premiumRateByIc\": {{premiumRateByIc}},\r\n    \"utilizedRateAnnum\": {{utilizedRatePA}},\r\n    \"unutilizedRateAnnum\": {{unUtilizedRatePA}},\r\n    \"isCancellableByIc\": true,\r\n    \"minPremiumAmount\": 1000,\r\n    \"minDepositAmount\": null,\r\n    \"premiumFundingDeadline\": \"{{premiumFundingDeadline}}\",\r\n    \"icPaper\": \"insurance paper\",\r\n    \"icQuoteId\": null,\r\n    \"commissionRate\":{{commission}},\r\n    \"daysToQuoteExpiration\": 30,\r\n    \"deductibleByIc\": {{deductibleByIp}},\r\n    \"deductiblePercentageByIc\": {{deductiblePercentageByIp}},\r\n    \"carrierRatingByAmBestId\": null,\r\n    \"carrierRatingBySpId\": null,\r\n    \"carrierRatingByOther\": null,\r\n    \"havingSubjectivity\": true,\r\n    \"estimatedPremium\": {{estimatedPremium}},\r\n    \"estimatedBrokerCommission\": {{estimatedBrokerComission}},\r\n    \"estimatedCoBrokerCommission\": {{estimatedCOBrokerComission}},\r\n\r\n      \"cancellableActionTypeId\": {{cancellableActionTypeId}}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Quotes/amendcoveragebyic",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Quotes",
												"amendcoveragebyic"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9604508d-ffc8-4d62-9572-ec721f389f12",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5644bd83-a94d-4ce4-9e8d-61c7956e8646",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ADMIN_user",
					"item": [
						{
							"name": "Policy",
							"item": [
								{
									"name": "POST PUT as Draft and DELETE",
									"item": [
										{
											"name": "Post Save Policy As Draft",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ef035771-37bd-4c52-8246-7ca9bce8ae82",
														"exec": [
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/Policies\");\r",
															"\r",
															"pm.sendRequest({\r",
															"  url: url,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Accept': 'application/json',\r",
															"    'Content-Type': 'application/json',\r",
															"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenADMIN\")\r",
															"  }\r",
															"\r",
															"}, function (err, res) {\r",
															"\r",
															"\r",
															"   var jsonData = res.json();\r",
															"    \r",
															"    \r",
															"     for (var i = 0; i < jsonData.length; i++) {\r",
															"       \r",
															"     \r",
															"             if (jsonData[i].id == pm.environment.get('policy'))\r",
															"             {\r",
															"              \r",
															"                pm.variables.set(\"insuredPartyId\",jsonData[i].insuredParty.id);\r",
															"                console.log(jsonData[i].insuredParty.id);\r",
															"                pm.variables.set(\"insuranceCarrierId\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierId);\r",
															"                console.log(jsonData[i].policyInsuranceCarriers[0].insuranceCarrierId);                 \r",
															"                pm.variables.set(\"insuranceCarrierName\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierName);\r",
															"                console.log(jsonData[i].policyInsuranceCarriers[0].insuranceCarrierName);\r",
															"                break;\r",
															"             } \r",
															"         \r",
															"}\r",
															"\r",
															" });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0c7849df-fe00-4f55-949a-eb53715f6f8d",
														"exec": [
															"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"   pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"\r",
															"pm.test(\"Body is correct\", function () {\r",
															"  var jsonData= pm.response.json();\r",
															"  pm.expect(jsonData).to.be.a('number');\r",
															"});\r",
															"\r",
															"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
															"var policyId= pm.response.json();\r",
															"console.log(policyId);\r",
															"pm.environment.set(\"POLICYID\",policyId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessTokenADMIN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"insuredPartyId\": {{insuredPartyId}},\n    \"policyInsuranceCarriers\": [\n        {\n            \"insuranceCarrierId\": {{insuranceCarrierId}},\n            \"insuranceCarrierName\": \"{{insuranceCarrierName}}\"\n        }\n    ],\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"name\": \"API_POST_DRAFT_TEST\",\n    \"carrierPolicyNumber\": \"\",\n    \"inceptionDate\": null,\n    \"expiryDate\": null,\n    \"lossPayee\": \"\",\n    \"additionalInsuredName\": \"\",\n    \"documentFileIds\": [],\n    \"policyGoverningLawIds\": [],\n    \"policyTransactionCurrencyCodes\": [],\n    \"perilCoverageClaimFilingPeriod\": [],\n    \"perilCoverageWaitingPeriod\": [],\n    \"policyPremiumSchedule\": {\n        \"premiumRptPeriodDetails\": []\n    },\n    \"policyBuyerSchedules\": [],\n    \"policyCountrySchedules\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Policies/draft",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Policies",
														"draft"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put_Policy as Draft",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c0e766e4-91f0-4e29-a5f5-02336ac0c21b",
														"exec": [
															"\r",
															" setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
															"var responseJSONdata = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Successful PUT Request\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(200);\r",
															"    \r",
															"});\r",
															"\r",
															"pm.test(\"Successful PUT Request\"), function(){\r",
															"    pm.expect(pm.response.body).to.noteql(0);\r",
															"};\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "069f73f7-2270-4b9f-a8d6-091b01c41074",
														"exec": [
															"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/Policies?count=100\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenADMIN\")\r",
															"      }\r",
															"      \r",
															"}, function (err, res) {\r",
															"\r",
															"  var jsonData = res.json();\r",
															"    for (var i = 0; i < jsonData.length; i++) {\r",
															"   \r",
															"             if (jsonData[i].id === pm.environment.get('POLICYID')){\r",
															"                console.log(jsonData[i].id);\r",
															"              pm.variables.set(\"insuredPartyId\",jsonData[i].insuredParty.id);\r",
															"              console.log(jsonData[i].insuredParty.id);\r",
															"              pm.variables.set(\"insuranceCarrierId\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierId);\r",
															"              pm.variables.set(\"insuranceCarrierName\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierName);\r",
															"}\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n    \"policyInsuranceCarriers\": [\n        {\n            \"insuranceCarrierId\": {{insuranceCarrierId}},\n            \"insuranceCarrierName\": \"{{insuranceCarrierName}}\"\n        }\n    ],\n    \"insuredPartyId\":{{insuredPartyId}},\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"name\": \"API_POST_DRAFT_TEST\",\n    \"carrierPolicyNumber\": \"\",\n    \"inceptionDate\": null,\n    \"expiryDate\": null,\n    \"lossPayee\": \"\",\n    \"additionalInsuredName\": \"\",\n    \"documentFileIds\": [],\n    \"policyGoverningLawIds\": [],\n    \"policyTransactionCurrencyCodes\": [],\n    \"perilCoverageClaimFilingPeriod\": [],\n    \"perilCoverageWaitingPeriod\": [],\n    \"policyPremiumSchedule\": {\n        \"premiumRptPeriodDetails\": []\n    },\n    \"policyBuyerSchedules\": [],\n    \"policyCountrySchedules\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Policies/{{POLICYID}}/draft",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Policies",
														"{{POLICYID}}",
														"draft"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete_Policy By ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "52253a61-2f94-46ea-89c7-e71e835791e4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "48cd0554-3c0c-4b87-99e1-0d0d845420a6",
														"exec": [
															"\r",
															" setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
															"\r",
															"\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(200);\r",
															"    \r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseURI}}/api/Policies/{{POLICYID}}",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Policies",
														"{{POLICYID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POST PUT as Incomplete",
									"item": [
										{
											"name": "Post Save Policy As Incomplete",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6f2f4efb-b384-4a4e-a276-4b275bd7e1d8",
														"exec": [
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/Policies\");\r",
															"\r",
															"pm.sendRequest({\r",
															"  url: url,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Accept': 'application/json',\r",
															"    'Content-Type': 'application/json',\r",
															"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenADMIN\")\r",
															"  }\r",
															"\r",
															"}, function (err, res) {\r",
															"\r",
															"\r",
															"   var jsonData = res.json();\r",
															"    \r",
															"    \r",
															"     for (var i = 0; i < jsonData.length; i++) {\r",
															"       \r",
															"     \r",
															"             if (jsonData[i].id == pm.environment.get('policy'))\r",
															"             {\r",
															"              \r",
															"                pm.variables.set(\"insuredPartyId\",jsonData[i].insuredParty.id);\r",
															"                console.log(jsonData[i].insuredParty.id);\r",
															"                pm.variables.set(\"insuranceCarrierId\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierId);\r",
															"                console.log(jsonData[i].policyInsuranceCarriers[0].insuranceCarrierId);                 \r",
															"                pm.variables.set(\"insuranceCarrierName\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierName);\r",
															"                break;\r",
															"             } \r",
															"         \r",
															"}\r",
															"\r",
															" });\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d4424593-9e6e-437a-8a5a-d6d497bd660e",
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"   pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"\r",
															"pm.test(\"Body is correct\", function () {\r",
															"  var jsonData= pm.response.json();\r",
															"  pm.expect(jsonData).to.be.a('number');\r",
															"});\r",
															"\r",
															"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
															"var policyId= pm.response.json();\r",
															"console.log(policyId);\r",
															"pm.environment.set(\"POLICYID\",policyId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessTokenADMIN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"insuredPartyId\": {{insuredPartyId}},\n    \"policyInsuranceCarriers\": [\n        {\n            \"insuranceCarrierId\": {{insuranceCarrierId}},\n            \"insuranceCarrierName\": \"{{insuranceCarrierName}}\"\n        }\n    ],\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"name\": \"API_POST_DRAFT_TEST\",\n    \"carrierPolicyNumber\": \"\",\n \"inceptionDate\": \"2020-3-1T00:00:00.000Z\",\n    \"expiryDate\": \"2020-6-26T00:00:00.000Z\",\n    \"lossPayee\": \"\",\n    \"additionalInsuredName\": \"\",\n    \"documentFileIds\": [],\n    \"policyGoverningLawIds\": [],\n    \"policyTransactionCurrencyCodes\": [],\n    \"perilCoverageClaimFilingPeriod\": [],\n    \"perilCoverageWaitingPeriod\": [],\n    \"policyPremiumSchedule\": {\n        \"premiumRptPeriodDetails\": []\n    },\n    \"policyBuyerSchedules\": [],\n    \"policyCountrySchedules\": []\n}\n   \n   ",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Policies/incomplete",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Policies",
														"incomplete"
													]
												}
											},
											"response": []
										},
										{
											"name": "Put_Policy as Incomplete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aef52617-e8e7-4116-9771-9d9ebc35e2d2",
														"exec": [
															"var responseJSONdata = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(200);\r",
															"    \r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"To check Policy details is not null (id,name,insuranceCarrier,insuredParty)\" , function(){\r",
															"    for (var i=0; i < responseJSONdata.length; i++)\r",
															"    {\r",
															"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
															"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].lqxPolicyNumber).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].carrierPolicyNumber).to.not.eql(null);\r",
															"      //pm.expect(responseJSONdata[i].inceptionDate).to.not.eql(null);\r",
															"      //pm.expect(responseJSONdata[i].expiryDate).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].stateId).to.not.eql(null);\r",
															"      \r",
															"      \r",
															"    }         \r",
															"    \r",
															"}); "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8be84518-5321-4bbe-bd6c-c284a24ff893",
														"exec": [
															"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
															"\r",
															"var url = pm.variables.get(\"baseURI\");\r",
															"url = url.concat(\"/api/Policies?count=100\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenADMIN\")\r",
															"      }\r",
															"      \r",
															"}, function (err, res) {\r",
															"\r",
															"  var jsonData = res.json();\r",
															"    for (var i = 0; i < jsonData.length; i++) {\r",
															"   \r",
															"             if (jsonData[i].id === pm.environment.get('POLICYID')){\r",
															"                  pm.variables.set(\"insuredPartyId\",jsonData[i].insuredParty.id);\r",
															"                console.log(jsonData[i].insuredParty.id);\r",
															"                pm.variables.set(\"insuranceCarrierId\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierId);\r",
															"                console.log(jsonData[i].policyInsuranceCarriers[0].insuranceCarrierId);                 \r",
															"                pm.variables.set(\"insuranceCarrierName\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierName);\r",
															"    }\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"insuredPartyId\": {{insuredPartyId}},\n    \"policyInsuranceCarriers\": [\n        {\n            \"insuranceCarrierId\": {{insuranceCarrierId}},\n            \"insuranceCarrierName\": \"{{insuranceCarrierName}}\"\n        }\n    ],\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"name\": \"PUT POLICY as INCOMPLETE\",\n    \"carrierPolicyNumber\": \"\",\n    \"inceptionDate\": \"2020-6-10T00:00:00.000Z\",\n    \"expiryDate\": \"2020-6-27T00:00:00.000Z\",\n    \"lossPayee\": \"\",\n    \"additionalInsuredName\": \"\",\n    \"documentFileIds\": [\n        {\n            \"policyDocumentTypeId\": 1,\n            \"fileName\": \"11.txt\",\n            \"fileGuid\": \"225e2a95-c61e-468f-9b4d-ad53dfaa7c5c\",\n            \"documentPath\": \"\",\n            \"description\": \"\"\n        },\n        {\n            \"policyDocumentTypeId\": 2,\n            \"fileName\": \"Buyer Schedule CSV Template 2 (populated).txt\",\n            \"fileGuid\": \"226ea38f-0d1a-4389-a7e3-aa3e5e0f7a72\",\n            \"documentPath\": \"\",\n            \"description\": \"\"\n        }\n    ],\n    \"policyGoverningLawIds\": [],\n    \"policyTransactionCurrencyCodes\": [],\n    \"perilCoverageClaimFilingPeriod\": [],\n    \"perilCoverageWaitingPeriod\": [],\n    \"policyPremiumSchedule\": {\n        \"premiumRptPeriodDetails\": []\n    },\n    \"policyBuyerSchedules\": [],\n    \"policyCountrySchedules\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Policies/{{POLICYID}}/incomplete",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Policies",
														"{{POLICYID}}",
														"incomplete"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get_Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3e14c13-f8e3-4347-9a6a-b749aed94734",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"pm.test(\"To check Policy details is not null (id,name,insuranceCarrier,insuredParty)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].insuranceCarrier).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].insuredParty).to.not.eql(null);\r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); \r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05be5444-3f97-4e81-a05c-1617cc8f9785",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Policies?count=100",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Policies"
											],
											"query": [
												{
													"key": "count",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Policy By ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e0632b49-aebb-4099-97b5-9f282079101c",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Policies?count=100\");\r",
													"\r",
													"pm.sendRequest({\r",
													"  url: url,\r",
													"  method: 'GET',\r",
													"  header: {\r",
													"    'Accept': 'application/json',\r",
													"    'Content-Type': 'application/json',\r",
													"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenADMIN\")\r",
													"  }\r",
													"\r",
													"}, function (err, res) {\r",
													"\r",
													"\r",
													"  var jsonData = res.json();\r",
													"  \r",
													"\r",
													"  var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  pm.variables.set(\"policyId\", jsonData[i].id);\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6f48d4b9-98d6-4b82-8f20-1cfbcf660cd4",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"To check Policy details is not null (id,name,insuranceCarrier,insuredParty)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].lqxPolicyNumber).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].carrierPolicyNumber).to.not.eql(null);\r",
													"      //pm.expect(responseJSONdata[i].inceptionDate).to.not.eql(null);\r",
													"      //pm.expect(responseJSONdata[i].expiryDate).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].stateId).to.not.eql(null);\r",
													"      \r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Policies/{{policyId}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Policies",
												"{{policyId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Policy By ID PolicyDocuments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7f11c95-9e61-43ee-bb13-4f8ef233e344",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"To check Policy details is not null (id,name,insuranceCarrier,insuredParty)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].lqxPolicyNumber).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].carrierPolicyNumber).to.not.eql(null);\r",
													"      //pm.expect(responseJSONdata[i].inceptionDate).to.not.eql(null);\r",
													"      //pm.expect(responseJSONdata[i].expiryDate).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].stateId).to.not.eql(null);\r",
													"      \r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b0dbf864-5f45-4995-8334-6e6ba5ac3891",
												"exec": [
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Policies?count=100\");\r",
													"\r",
													"pm.sendRequest({\r",
													"  url: url,\r",
													"  method: 'GET',\r",
													"  header: {\r",
													"    'Accept': 'application/json',\r",
													"    'Content-Type': 'application/json',\r",
													"    'Authorization': 'bearer ' + pm.variables.get(\"accessTokenADMIN\")\r",
													"  }\r",
													"\r",
													"}, function (err, res) {\r",
													"\r",
													"\r",
													"  var jsonData = res.json();\r",
													"  \r",
													"\r",
													"  var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
													"  pm.variables.set(\"policyId\", jsonData[i].id);\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Policies/{{policyId}}/policydocuments",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Policies",
												"{{policyId}}",
												"policydocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put_Policy as Bound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13c56042-57b4-49f0-97c3-694034806163",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200);\r",
													"    \r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"To check Policy details is not null (id,name,insuranceCarrier,insuredParty)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].name).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].lqxPolicyNumber).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].carrierPolicyNumber).to.not.eql(null);\r",
													"      //pm.expect(responseJSONdata[i].inceptionDate).to.not.eql(null);\r",
													"      //pm.expect(responseJSONdata[i].expiryDate).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].stateId).to.not.eql(null);\r",
													"      \r",
													"      \r",
													"    }         \r",
													"    \r",
													"}); "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1d2d4d49-bfab-42f1-ac74-0ef574c9db7e",
												"exec": [
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));\r",
													"\r",
													"var url = pm.variables.get(\"baseURI\");\r",
													"url = url.concat(\"/api/Policies?count=100\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Accept': 'application/json',\r",
													"        'Content-Type': 'application/json',\r",
													"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenADMIN\")\r",
													"      }\r",
													"      \r",
													"}, function (err, res) {\r",
													"\r",
													"  var jsonData = res.json();\r",
													"    for (var i = 0; i < jsonData.length; i++) {\r",
													"   \r",
													"             if (jsonData[i].id === pm.environment.get('POLICYID')){\r",
													"                console.log(jsonData[i].id);\r",
													"              pm.variables.set(\"insuredPartyId\",jsonData[i].insuredParty.id);\r",
													"              console.log(jsonData[i].insuredParty.id);\r",
													"              pm.variables.set(\"insuranceCarrierId\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierId);\r",
													"              pm.variables.set(\"insuranceCarrierName\",jsonData[i].policyInsuranceCarriers[0].insuranceCarrierName);\r",
													"}\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"insuredPartyId\": {{insuredPartyId}},\n    \"policyInsuranceCarriers\": [\n        {\n            \"insuranceCarrierId\": {{insuranceCarrierId}},\n            \"insuranceCarrierName\": \"{{insuranceCarrierName}}\"\n        }\n    ],\n    \"brokerId\": 6,\n    \"coBrokerId\": 7,\n    \"name\": \"PUT POLICY as INCOMPLETE\",\n    \"carrierPolicyNumber\": \"\",\n    \"inceptionDate\": \"2020-6-17T00:00:00.000Z\",\n    \"expiryDate\": \"2020-6-27T00:00:00.000Z\",\n    \"lossPayee\": \"\",\n    \"additionalInsuredName\": \"\",\n    \"documentFileIds\": [\n        {\n            \"policyDocumentTypeId\": 1,\n            \"fileName\": \"11.txt\",\n            \"fileGuid\": \"225e2a95-c61e-468f-9b4d-ad53dfaa7c5c\",\n            \"documentPath\": \"\",\n            \"description\": \"\"\n        },\n        {\n            \"policyDocumentTypeId\": 2,\n            \"fileName\": \"Buyer Schedule CSV Template 2 (populated).txt\",\n            \"fileGuid\": \"226ea38f-0d1a-4389-a7e3-aa3e5e0f7a72\",\n            \"documentPath\": \"\",\n            \"description\": \"\"\n        }\n    ],\n    \"policyGoverningLawIds\": [],\n    \"policyTransactionCurrencyCodes\": [],\n    \"perilCoverageClaimFilingPeriod\": [],\n    \"perilCoverageWaitingPeriod\": [],\n    \"policyPremiumSchedule\": {\n        \"premiumRptPeriodDetails\": []\n    },\n    \"policyBuyerSchedules\": [],\n    \"policyCountrySchedules\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/Policies/{{POLICYID}}/bound",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Policies",
												"{{POLICYID}}",
												"bound"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Indicative Quotes",
							"item": [
								{
									"name": "POST and DELETE Quotes",
									"item": [
										{
											"name": "Post_Indicative Quotes",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ffb04e65-1744-4d81-877c-3cacf69b00e6",
														"exec": [
															"var responseJSONdata = JSON.parse(responseBody);\r",
															"\r",
															"    \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"To check Activity Monitor details is not null (transactionId,insuredPartyId,productCode,leadingQuoteStateName,carriersCount,quotesCount,createdBy,createdOn,updatedBy,updatedOn,originalQuoteSummary,mostRecentQuoteSummary,statusSummary)\" , function(){\r",
															"    for (var i=0; i < responseJSONdata.length; i++)\r",
															"    {\r",
															"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
															"      pm.expect(responseJSONdata[i].quotesCount).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].maxCreditLimitTotal).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].debtorsCount).to.not.eql(null);\r",
															"    }         \r",
															"    var IndQuoteId= pm.response.json();\r",
															"console.log(IndQuoteId);\r",
															"pm.environment.set(\"IndQuoteId\",IndQuoteId);\r",
															"    \r",
															"}); \r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c475b396-a2eb-4c27-a979-a8b11456d0b3",
														"exec": [
															"var url = pm.variables.get(\"baseURI\");\r",
															"   url = url.concat(\"/api/Indicative/quotes\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: url,\r",
															"    method: 'GET',\r",
															"    header: {\r",
															"        'Accept': 'application/json',\r",
															"        'Content-Type': 'application/json',\r",
															"        'Authorization': 'bearer '+ pm.variables.get(\"accessTokenIP\")\r",
															"              }\r",
															"      \r",
															"}, function (err, res) {\r",
															"    \r",
															"   \r",
															"    var jsonData = res.json();\r",
															"    console.log(jsonData);\r",
															"    var i=Math.floor((Math.random() * jsonData.length) + 1);\r",
															"\r",
															" \r",
															"    pm.variables.set(\"duns\",jsonData[i].accountDebtor.duns);\r",
															"    console.log(jsonData[i].accountDebtor.duns);\r",
															"    pm.variables.set(\"debtorName\",jsonData[i].accountDebtor.name);   \r",
															"    console.log(jsonData[i].accountDebtor.name); \r",
															"    pm.variables.set(\"countryCode\",jsonData[i].accountDebtor.countryCode);\r",
															"    console.log(jsonData[i].accountDebtor.countryCode);\r",
															"    pm.variables.set(\"maxCreditLimit\", _.random(100000,9999999));\r",
															"    pm.variables.set(\"indemnity\", _.random(1,99));\r",
															"    pm.variables.set(\"premiumRate\", _.random(2,99));\r",
															"   \r",
															"    //console.log(jsonData[i].insuranceCarrierId);\r",
															"  \r",
															"    \r",
															" });\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{accessTokenADMIN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"insuranceCarrierId\": {{carrierId}},\n        \"maxCreditLimit\": {{maxCreditLimit}},\n        \"indemnity\": {{indemnity}},\n        \"premiumRate\": 40,\n        \"postedDaysToQuoteExpiration\": 2,\n        \"accountDebtor\": {\n            \"duns\": \"{{duns}}\",\n            \"name\": \"{{debtorName}}\",\n            \"countryCode\": \"{{countryCode}}\"\n        }\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Indicative/quotes",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Indicative",
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete_Indicative Quotes",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "89496b53-384c-462c-9fb8-446b9bfbddec",
														"exec": [
															"var responseJSONdata = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Successful GET request\", function () {\r",
															"    pm.expect(pm.response.code).to.eql(200)});\r",
															"    \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"To check Activity Monitor details is not null (transactionId,insuredPartyId,productCode,leadingQuoteStateName,carriersCount,quotesCount,createdBy,createdOn,updatedBy,updatedOn,originalQuoteSummary,mostRecentQuoteSummary,statusSummary)\" , function(){\r",
															"    for (var i=0; i < responseJSONdata.length; i++)\r",
															"    {\r",
															"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
															"      pm.expect(responseJSONdata[i].quotesCount).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].maxCreditLimitTotal).to.not.eql(null);\r",
															"      pm.expect(responseJSONdata[i].debtorsCount).to.not.eql(null);\r",
															"    }         \r",
															"    \r",
															"}); \r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "658ca951-0449-4fc6-aa41-3d980df5cce5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseURI}}/api/Indicative/quotes/{{IndQuoteId}}",
													"host": [
														"{{baseURI}}"
													],
													"path": [
														"api",
														"Indicative",
														"quotes",
														"{{IndQuoteId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get_Indicative Quotes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06453213-6019-4187-b33b-c6c3f69dac14",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200)});\r",
													"    \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"To check Activity Monitor details is not null (transactionId,insuredPartyId,productCode,leadingQuoteStateName,carriersCount,quotesCount,createdBy,createdOn,updatedBy,updatedOn,originalQuoteSummary,mostRecentQuoteSummary,statusSummary)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].id).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].insuranceCarrierId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].accountDebtorId).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].countryCode).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].duns).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].countryName).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].maxCreditLimit).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].indemnity).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].premiumRate).to.not.eql(null);\r",
													"\r",
													"\r",
													"    }         \r",
													"    \r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Matching data items returned: \"+ responseJSONdata.length, function(){\r",
													"    pm.expect(responseJSONdata.length).to.be.above(0);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Indicative/quotes",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Indicative",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Quote Summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b50c970-f0e8-40d7-aec3-9bdf6476981f",
												"exec": [
													"var responseJSONdata = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Successful GET request\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(200)});\r",
													"    \r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"To check Activity Monitor details is not null (transactionId,insuredPartyId,productCode,leadingQuoteStateName,carriersCount,quotesCount,createdBy,createdOn,updatedBy,updatedOn,originalQuoteSummary,mostRecentQuoteSummary,statusSummary)\" , function(){\r",
													"    for (var i=0; i < responseJSONdata.length; i++)\r",
													"    {\r",
													"    // pm.expect(responseJSONdata[i].id).to.eql(expectedUserId);\r",
													"      pm.expect(responseJSONdata[i].quotesCount).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].maxCreditLimitTotal).to.not.eql(null);\r",
													"      pm.expect(responseJSONdata[i].debtorsCount).to.not.eql(null);\r",
													"    }         \r",
													"    \r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92a00d96-dec5-44e6-8b44-00acfd1ff1dd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/Indicative/quotessummary",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"Indicative",
												"quotessummary"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{accessTokenADMIN}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "MO user",
					"item": [
						{
							"name": "POST and DELETE Subsidiary",
							"item": [
								{
									"name": "POST Subsidiaries",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "92cb8e9f-914f-4303-af3d-2ccef8f05e50",
												"exec": [
													"var unique = getRandomAlphaNumeric(2,\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");",
													"pm.variables.set(\"val\", unique);",
													"",
													"function getRandomAlphaNumeric(len, chars) {",
													"    var result = '';",
													"    for (var i = len; i > 0; i--)",
													"    { ",
													"     result += chars[Math.floor(Math.random() * chars.length)];",
													"    }",
													"     return result;",
													"}",
													"",
													"pm.variables.set(\"isActive\", true);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "89e7bf4d-045c-4678-a766-d7eecb983adc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"",
													"",
													"  setTimeout(function(){}, pm.variables.get(\"stateChangeDelay\"));",
													"",
													"  var responseJSONdata = pm.response.json();",
													"  var subID= responseJSONdata.id;",
													" ",
													"  pm.variables.set(\"SubID\",subID);",
													"console.log(subID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 0,\r\n  \"legalName\": \"API_Subsidiary_{{val}}\",\r\n  \"displayName\": \"Subsidiary_{{val}}\",\r\n  \"insuranceCarrierId\": {{INS_IC}},\r\n  \"isActive\": {{isActive}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURI}}/api/InsuranceCarriers/subsidiary/{{INS_IC}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuranceCarriers",
												"subsidiary",
												"{{INS_IC}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Subsidiary Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5b008e3c-029b-4dbe-a0e1-961119dd10a1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05a920d2-f446-4462-ac68-08ef3b93f766",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURI}}/api/InsuranceCarriers/subsidiary/{{SubID}}",
											"host": [
												"{{baseURI}}"
											],
											"path": [
												"api",
												"InsuranceCarriers",
												"subsidiary",
												"{{SubID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET InsuredParty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fca2057-56b1-48e2-8ce0-0db291a4b138",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/InsuredParties/partyCarriers/{{INS_IP}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"InsuredParties",
										"partyCarriers",
										"{{INS_IP}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT InsuredParty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e94aeecc-17d1-46b5-bb15-704acd90d879",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" try {",
											"",
											"    var responseJSONdata = JSON.parse(responseBody);",
											"",
											"pm.test(\"To check InsuredParty details is not null (id,name,isSelected,isActive)\", function () {",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        pm.expect(responseJSONdata[i].id).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].name).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].isSelected).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].isActive).to.not.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {",
											"    pm.expect(responseJSONdata.length).to.be.above(0);",
											"});",
											"}",
											"catch (e) {",
											"",
											"    if (responseBody == '') {",
											"        pm.test(\"Empty body response\", () => { throw new Error(e.message) });",
											"    }",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71ee4d88-7e24-4094-98e4-ac82051801f8",
										"exec": [
											"//Test2\r",
											"pm.variables.set(\"isSelected\", true);\r",
											"pm.variables.set(\"id\", 1009);\r",
											"pm.variables.set(\"name\", \"575_IC\");\r",
											"pm.variables.set(\"isActive\", true);\r",
											"\r",
											"\r",
											"//UATDemo\r",
											"//pm.variables.set(\"isSelected\", true);\r",
											"//pm.variables.set(\"id\", 99);\r",
											"//pm.variables.set(\"name\", \"Great American Ins. / FCIA\");\r",
											"//pm.variables.set(\"isActive\", true);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"isSelected\": {{isSelected}},\r\n    \"id\": {{id}},\r\n    \"name\": \"{{name}}\",\r\n    \"duns\": \"1708\",\r\n    \"countryName\": \"United States of America\",\r\n    \"isActive\": {{isActive}},\r\n    \"createdBy\": null,\r\n    \"createdOn\": \"2020-02-17T13:09:08.363Z\",\r\n    \"updatedBy\": 0,\r\n    \"updatedOn\": \"2020-02-17T13:09:08.363Z\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURI}}/api/InsuredParties/partyCarriers/{{INS_IP}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"InsuredParties",
										"partyCarriers",
										"{{INS_IP}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_InsuranceCaarrier/ Subsidiaries By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3aa4114d-8255-4fc3-a1fa-71c297c27037",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" try {",
											"",
											"    var responseJSONdata = JSON.parse(responseBody);",
											"",
											"pm.test(\"To check InsuredParty details is not null (id,name,isSelected,isActive)\", function () {",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        pm.expect(responseJSONdata[i].id).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].name).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].isSelected).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].isActive).to.not.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {",
											"    pm.expect(responseJSONdata.length).to.be.above(0);",
											"});",
											"}",
											"catch (e) {",
											"",
											"    if (responseBody == '') {",
											"        pm.test(\"Empty body response\", () => { throw new Error(e.message) });",
											"    }",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/InsuranceCarriers/subsidiaries/{{INS_IC}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"InsuranceCarriers",
										"subsidiaries",
										"{{INS_IC}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Version",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be122f2b-e667-443a-96af-6300657ab89c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" try {",
											"",
											"    var responseJSONdata = JSON.parse(responseBody);",
											"",
											"pm.test(\"To check InsuredParty details is not null (id,name,isSelected,isActive)\", function () {",
											"    for (var i = 0; i < responseJSONdata.length; i++) {",
											"        pm.expect(responseJSONdata[i].id).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].name).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].isSelected).to.not.eql(null);",
											"        pm.expect(responseJSONdata[i].isActive).to.not.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Matching data items returned: \" + responseJSONdata.length, function () {",
											"    pm.expect(responseJSONdata.length).to.be.above(0);",
											"});",
											"}",
											"catch (e) {",
											"",
											"    if (responseBody == '') {",
											"        pm.test(\"Empty body response\", () => { throw new Error(e.message) });",
											"    }",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURI}}/api/InsuranceCarriers/subsidiaries/{{INS_IC}}",
									"host": [
										"{{baseURI}}"
									],
									"path": [
										"api",
										"InsuranceCarriers",
										"subsidiaries",
										"{{INS_IC}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{accessTokenMO}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "220ce8cc-a2d5-44be-b4f3-3b8616a0286b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8107c436-724f-4bf7-94ec-6fe4c981f34a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "df21cf95-6be1-44d5-a2f4-8674b4462222",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8edfb1b4-7b2b-414d-8bb7-fb4df0d64830",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessTokenIP}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bd12184c-8213-472c-82a4-4ff84aa2b0eb",
				"type": "text/javascript",
				"exec": [
					"//IP_User access token",
					"let userIP = pm.environment.get(\"User_IP\");",
					"let userIC = pm.environment.get(\"User_IC\");",
					"let userADMIN = pm.environment.get(\"User_ADMIN\");",
					"let userMO = pm.environment.get(\"User_MO\");",
					"let password1 = pm.environment.get(\"Password\")",
					"",
					"",
					"",
					"let jwt = pm.environment.get('accessTokenIP');",
					"let jwt_decode=null;",
					"if (jwt.length > 0) {",
					" let jwt_payload_base64 = jwt.split('.')[1];",
					" jwt_decode = JSON.parse(atob(jwt_payload_base64));",
					"}",
					"if ((jwt.length === 0) || (Date.now()/1000 >= jwt_decode['exp'])) {",
					" let audience = pm.environment.get('audience');",
					" let getTokenRequest = {",
					"     method: 'POST',",
					"     url: 'https://lqxdev.b2clogin.com/lqxdev.onmicrosoft.com/oauth2/v2.0/token?p=B2C_1_sign_in_using_ropc',",
					"     header: \"Content-Type: application/x-www-form-urlencoded\",",
					"     body: {",
					"         mode: 'urlencoded',",
					"         urlencoded: [",
					"             { key: 'grant_type', value: 'password' },",
					"             { key: 'username', value: userIP },",
					"             { key: 'password', value: password1 },",
					"             { key: 'scope', value: 'openid '+audience+' offline_access' },",
					"             { key: 'client_id', value: audience }",
					"         ]",
					"     }",
					" };",
					" pm.sendRequest(getTokenRequest, (err, response) => {",
					"   let jsonResponse = response.json(),",
					"       accessToken = jsonResponse.access_token;",
					"   pm.environment.set('accessTokenIP', accessToken);",
					" });",
					"}",
					"",
					"let jwt1 = pm.environment.get('accessTokenIC');",
					"let jwt1_decode=null;",
					"if (jwt1.length > 0) {",
					"  let jwt1_payload_base64 = jwt1.split('.')[1];",
					"  jwt1_decode = JSON.parse(atob(jwt1_payload_base64));",
					"}",
					"",
					"if ((jwt1.length === 0) || (Date.now()/1000 >= jwt1_decode['exp'])) {",
					"  let audience = pm.environment.get('audience');",
					"  ",
					"",
					"  let getTokenRequest = {",
					"      method: 'POST',",
					"      url: 'https://lqxdev.b2clogin.com/lqxdev.onmicrosoft.com/oauth2/v2.0/token?p=B2C_1_sign_in_using_ropc',",
					"      header: \"Content-Type: application/x-www-form-urlencoded\",",
					"      body: {",
					"          mode: 'urlencoded',",
					"          urlencoded: [",
					"              { key: 'grant_type', value: 'password' },",
					"              { key: 'username', value: userIC },",
					"              { key: 'password', value: password1 },",
					"              { key: 'scope', value: 'openid '+audience+' offline_access' },",
					"              { key: 'client_id', value: audience }",
					"          ]",
					"      }",
					"  };",
					"",
					"  pm.sendRequest(getTokenRequest, (err, response) => {",
					"",
					"    let jsonResponse = response.json(),",
					"",
					"        accessToken = jsonResponse.access_token;",
					"",
					"    pm.environment.set('accessTokenIC', accessToken);",
					"  });",
					"}",
					"",
					"",
					"",
					"",
					"let jwt2 = pm.environment.get('accessTokenADMIN');",
					"let jwt2_decode=null;",
					"if (jwt2.length > 0) {",
					"  let jwt2_payload_base64 = jwt2.split('.')[1];",
					"  jwt2_decode = JSON.parse(atob(jwt2_payload_base64));",
					"}",
					"",
					"if ((jwt2.length === 0) || (Date.now()/1000 >= jwt2_decode['exp']) || !jwt2) {",
					"  let audience = pm.environment.get('audience');",
					"  ",
					"",
					"  let getTokenRequest = {",
					"      method: 'POST',",
					"      url: 'https://lqxdev.b2clogin.com/lqxdev.onmicrosoft.com/oauth2/v2.0/token?p=B2C_1_sign_in_using_ropc',",
					"      header: \"Content-Type: application/x-www-form-urlencoded\",",
					"      body: {",
					"          mode: 'urlencoded',",
					"          urlencoded: [",
					"              { key: 'grant_type', value: 'password' },",
					"              { key: 'username', value: userADMIN },",
					"              { key: 'password', value: password1 },",
					"              { key: 'scope', value: 'openid '+audience+' offline_access' },",
					"              { key: 'client_id', value: audience }",
					"          ]",
					"      }",
					"  };",
					"",
					"  pm.sendRequest(getTokenRequest, (err, response) => {",
					"",
					"    let jsonResponse = response.json(),",
					"",
					"        accessToken = jsonResponse.access_token;",
					"",
					"    pm.environment.set('accessTokenADMIN', accessToken);",
					"  });",
					"}",
					"",
					"",
					"let jwt3 = pm.environment.get('accessTokenMO');",
					"let jwt3_decode=null;",
					"if (jwt3.length > 0) {",
					"  let jwt3_payload_base64 = jwt3.split('.')[1];",
					"  jwt3_decode = JSON.parse(atob(jwt3_payload_base64));",
					"}",
					"",
					"if ((jwt3.length === 0) || (Date.now()/1000 >= jwt3_decode['exp']) || !jwt3) {",
					"  let audience = pm.environment.get('audience');",
					"  ",
					"",
					"  let getTokenRequest = {",
					"      method: 'POST',",
					"      url: 'https://lqxdev.b2clogin.com/lqxdev.onmicrosoft.com/oauth2/v2.0/token?p=B2C_1_sign_in_using_ropc',",
					"      header: \"Content-Type: application/x-www-form-urlencoded\",",
					"      body: {",
					"          mode: 'urlencoded',",
					"          urlencoded: [",
					"              { key: 'grant_type', value: 'password' },",
					"              { key: 'username', value: userMO },",
					"              { key: 'password', value: password1 },",
					"              { key: 'scope', value: 'openid '+audience+' offline_access' },",
					"              { key: 'client_id', value: audience }",
					"          ]",
					"      }",
					"  };",
					"",
					"  pm.sendRequest(getTokenRequest, (err, response) => {",
					"",
					"    let jsonResponse = response.json(),",
					"",
					"        accessToken = jsonResponse.access_token;",
					"",
					"    pm.environment.set('accessTokenMO', accessToken);",
					"  });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "914ebe85-2f99-43e7-bc31-9fe84d079cc4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c0e5beaa-9386-4c15-b392-4afc4d2485f7",
			"key": "id",
			"value": "8"
		},
		{
			"id": "9608eb6d-6f16-4c59-87d0-6066610965b6",
			"key": "duns",
			"value": "000000001"
		},
		{
			"id": "abc659e6-6af0-4f34-a5cc-f31812bd0927",
			"key": "QuoteId",
			"value": ""
		},
		{
			"id": "7052fd88-29f4-45db-a045-f0394a550045",
			"key": "transId",
			"value": ""
		},
		{
			"id": "8d9f2a21-0a1c-43ca-aee6-ee6ab0034dd5",
			"key": "tId",
			"value": ""
		},
		{
			"id": "b2183cfa-4f92-4b0a-bce0-68883dacc3ef",
			"key": "IPid",
			"value": ""
		},
		{
			"id": "e0dda49d-0bbf-4256-aae5-a7479f0b2896",
			"key": "duns",
			"value": "",
			"disabled": true
		},
		{
			"id": "34b7191f-a96b-47aa-b6e9-4d989e3d268c",
			"key": "debtorName",
			"value": ""
		},
		{
			"id": "04b050d0-b682-4e60-9938-8067ead10f2f",
			"key": "countryCode",
			"value": ""
		},
		{
			"id": "eac00119-307d-4a85-8033-374f28083229",
			"key": "maxCreditLimit",
			"value": ""
		},
		{
			"id": "b269a4f5-04be-44ae-8b46-60d15792dee8",
			"key": "indemnity",
			"value": ""
		},
		{
			"id": "18713c33-e43f-4d2e-b352-984e37c63546",
			"key": "insuranceCarrierId",
			"value": ""
		},
		{
			"id": "b8079ba0-6683-4872-8ee8-fcc9014e252d",
			"key": "ParticipantID",
			"value": ""
		},
		{
			"id": "b722122d-c8a8-4b86-a61f-eba65707e2f3",
			"key": "val",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}